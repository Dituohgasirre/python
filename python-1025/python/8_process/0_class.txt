目标: 执行其它程序
    执行程序:
        os.fork + os.exec       操作系统内核API实现
        os.system("ls -l")      ==> os.fork + os.exec + os.wait
        subprocess              实际执行程序使用此模块

    执行程序的运行环境:
        程序参数  第一个程序参数为进程名
            由于python是通过解析器运行, 程序名固定为python
        用户权限
            os.getuid/os.setuid
        环境变量
            os.environ
        工作目录
            os.chdir

    执行程序的目的: 服务本程序(运行程序为本程序实现某些操作)
        关心执行程序的死活
        关心执行程序的标准输入/标准输出/错误输出
        关心执行程序与本程序之间交互

    创建进程    os.fork()
        子进程完成复制父进程
        父进程不退出, 子进程先结束并且父进程没有对子进程做任务操作, 子进程为僵尸进程
        僵尸进程产生的原因:
            子进程结束的状态需要告诉父进程, 需要父进程去获取
            父进程云获取子进程结束状态: os.wait (阻塞等待) / os.waitpid
        子进程还在运行, 父进程结束, 此时子进程为孤儿进程, 被进程管理程序进行管理, 子进程的父PID会发生变化

    1. 让两个进程同时运行并且绝对不会产生僵尸进程
        方法一: 创建两个子进程同进运行，父进程等待两个子进程(写两个os.wait)
            if not os.fork():
                print("这是第一个子进程...")
                os._exit(0)

            if not os.fork():
                print("这是第二个子进程...")
                os._exit(0)

            os.wait()
            os.wait()

        方法二: 创建子进程, 子进程再创建子进程并且自己马上结束, 子子进程为孤儿进程
            if not os.fork():
                if not os.fork():
                    print("并行子进程要执行的代码块....")
                    os._exit(0)
                os._exit(0)
            os.wait()
            print("并行父进程要执行的代码块....")


    2. 创建10个进程分段处理1000到6000之间的回文数个数
        s = 1000
        e = 6000
        step = (e - s) / 10
        for i in range(10):
            if not os.fork():
                os._exit(run(s + i * step, s + (i + 1) * step))

        count = 0
        for i in range(10):
            pid, status = os.wait()
            count += os.WEXITSTATUS(status)



概念
    操作系统是多任务多用户
    多任务: 在操作系统上可以同时运行多个程序, 多个程序之间是并行运行
    进程: 正在运行的程序
    一个程序对应一个进程

结论
    进程编程的目的:
        执行其它程序
        并行处理


进程间通讯(POSIX)
    信号            异步通知
    管道            获取执行其它命令的输出
    消息队列        数据通信 队列
    共享内存        数据通信 直接访问内存 通信效率极高
    信号量          并发处理 锁机制
    套接字          数据通信 应用网络通信

-------------------------------------------------------------------------------
管道
    数据通信
    读写端必须同时存在才可以通信
    对空管道读会阻塞

    无名管道    os.pipe     应用于有关系的进程
    有名管道    os.mkfifo   应用于没有关系的进程

    作业:
        实现两个进程聊天程序
            收发同时(进程实现)

    mplayer的编程接口:
        mplayer fa.wmv -quiet -slave -input file=/tmp/fifo
            /tmp/fifo   必须是管道文件, 任何进程对此文件进行写都可以控制mplayer

        列出mplayer编程控制命令:
            mplayer -input cmdlist


    实现菜单控制mplayer的播放(考虑终端进度条的制作)


