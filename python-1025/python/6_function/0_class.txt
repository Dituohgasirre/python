数据结构: 数据元素之间的关系
    按逻辑关系划分:
        一对一: 线性表(元组, 列表) -> 栈和队列
        一对多: 树(字典)
        多对多: 图

    排序(二分查找 快速排序) -> 查找(顺序查找 二分查找 哈希查找)

-------------------------------------------------------------------------------
递归
    函数调用函数本身, 必须判断结束条件，否则没有意义
    递归调用即是数据结构栈的应用(先进后出)

    十进制转八进制: 断除法
        100 / 8     4
        12 / 8      4
        1 / 8       1

    斐波那契数列(递归和循环)
        1 1 2 3 5 8 13 21 34 55 89...
        循环:
            def fb(n):
                n1 = n2 = 1

                for i in range(2, n):
                    n1, n2 = n2, n1 + n2

                return n1

        递归:
            def fb(n):
                if n <= 2:
                    return 1
                return fb(n - 1) + fb(n - 2)

    猴子吃桃, 每天吃前一天一半多一个, 第五天吃完剩一个, 求没吃之前桃的个数(94)
        def days(d):
            if d == 0:
                return 1
            return (days(d - 1) + 1) * 2

    括号匹配

    用户输入表达式: 532+-6*
        ((5 + 3) - 2) * 6

        stack: 6235
          5 + 3  8
        stack: 628
          8 - 2  6
        stack: 66
          6 * 6  36

    迷宫求解

-------------------------------------------------------------------------------
填写符号使表达式成立(+ - * / % ^): (5 _ 3) _ 2 = 4
    test(a, b, op):
        if op == '+'
            return a + b
        elif op == '-'
            return a - b
        ...

    s = "+-*/%^"
    for i in s:
        for j in s:
            test(test(5, 3, j), 2, i) == 4

    o = {
            '+': lambda a, b: a + b,
            '-': lambda a, b: a - b,
            '*': lambda a, b: a * b,
            '/': lambda a, b: a / b,
            '%': lambda a, b: a % b,
            '^': lambda a, b: a ** b
        }
    for i in o:
        for j in o:
            if o[i](o[j](5, 3), 2) == 4:
                print("(5 %s 3) %s 2 = 4" % (j, i))



    (5 + 3) / 2 = 4
    (5 - 3) + 2 = 4
    (5 - 3) * 2 = 4
    (5 - 3) ^ 2 = 4
    (5 % 3) ^ 2 = 4
    (5 % 3) * 2 = 4
    (5 % 3) + 2 = 4

