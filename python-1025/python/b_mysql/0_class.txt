数据库
    数据库: 对数据进行存储 组织 查找 分析和管理的软件

    软件 -> 程序 -> 进程　-> 线程

    数据库的分类:
        关系型数据库(RDBMS)     MySQL -> Postgresql(PG) -> Mairadb
            大量的数据操作速度比纸或电子文档快
            支持编程对业务定制
            支持网络管理
            支持SQL语句快速进行操作

            关系型数据库由关系组成, 这些关系称为表格
            行 列 值 键(主键/外键) 模式 关系

        非关系型数据库(NoSQL)   Redis
            对象型数据库
            内存存储
            Key/Value

-------------------------------------------------------------------------------
MySQL
    MySQL是开源的关系型数据库管理系统
    MySQL体系结构:
        第一层: SQL Layer(SQL语句解析, Cache 执行计划优化等)
        第二层: 存储层(控制底层的数据存取) -> 存储引擎

        MySQL官方默认存储引擎是: InnoDB
            MyISAM
            Memory
            ...

    MySQL的组成
        MySQL采用C/S体系架构(并发控制/远程管理)

        MySQL服务器: mysqld
            运行在存储数据的机器, 负责网络监听并处理来自客户端的服务请求
            根据请求进行对数据操作, 将再操作结果返回

        MySQL客户端: mysql
            负责连接服务器并且发送特定操作的请求, 等待服务器处理回应并且展示结果

        mysqldump   数据导入或导出(备份还原)

        mysqladmin  检查服务器工作状态和数据库管理操作

        MySQL共享库 MySQL编程接口(C实现)

-------------------------------------------------------------------------------
MySQL安装
    sudo apt install mysql-server -y
        弹出窗口提示输入密码, 此密码为MySQL服务器超级管理员用户(root)的密码

    卸载MySQL:
        sudo apt remove mysql* -y
        sudo apt purge mysql* -y
        sudo apt autoremove
        sudo apt autoclean

    操作MySQL服务器程序
        启动服务: sudo service mysql start
        重启服务: sudo service mysql restart
        查看状态: sudo service mysql status
        关闭服务: sudo service mysql stop
                  sudo mysqladmin shutdown -u用户名 -p密码

        MySQL服务器默认使用端口是: 3306
            netstat -ntlup | grep :3306

    MySQL客户端连接本机服务器:
        mysql -uroot -p123123

    MySQL客户端连接其它服务器:
        mysql -uroot -p123123 -h 3.3.3.3 -P 3306
            默认情况服务器不允许外网IP连接, 只允许本机操作

    MySQL服务器的配置文件: /etc/mysql/mysql.conf.d/mysqld.cnf

-------------------------------------------------------------------------------
mysql的客户端的使用
    mysql客户端连接成功后进入交互模式
    交互模式提供了很多操作命令, 通过help可以列出所有命令, 这些命令是mysql客户端来解析
    交互模式下支持SQL语句, 但SQL语句是客户端发送给服务器去解析

    mysql客户端交互模式结尾符
        ; \g \G都是交互模式命令的结尾符
        ;和\g没有区别, 都是以表格形式显示数据, \G更友好的显示数据(数据列多的时候)

    help \h或?          获取命令的帮助
        ? help \h       获取所有命令的帮助
        help edit       获取edit命令的帮助
        help show       获取SQL语句关键词的帮助

    exit quit或\q       退出交互模式(ctrl + d)

    edit或\e            使用vim编辑当前命令

    prompt或\R          修改交互提示符

    system或\!          执行外部shell命令

    status或\s          获取服务器运行状态

-------------------------------------------------------------------------------
SQL语句
    MySQL遵循ANSI SQL92标准(结构化查询语言)
        DQL(Data Query Language)        数据查询语言 select
        DDL(Data Define Language)       数据定义语言 create drop alter truncate rename
        DML(Data Manipulate Language)   数据操纵语言 insert update delete
        DCL(Data Control Language)      数据控制语言 grant revoke

    SQL不是严格区分大小写, 关键词推荐使用全大写, 每条SQL语句必须使用分号结尾

    常量
        字符串常量
            SQL标准为单引号引起来内容
            字符串当中包含单引号, 使用两个单引号
            常量值大小写敏感

        数字常量
            整数 十进制数或科学记数法

        二进制常量
            x'十六进制表示方法'

    关键词和标识符
        select update insert create drop begin commit....

    注释
        单行注释    --      可以加任意位置, 位置后面内容为注释
        多行注释    /**/

-------------------------------------------------------------------------------
数据库管理
    数据库的创建
        CREATE DATABASE 数据库名称;
        CREATE SCHEMA 数据库名称;

        数据库的创建其实到/var/lib/mysql/目录下创建文件夹

    数据库字符集
        创建数据库指定字符集
            CREATE DATABASE 数据库名称 character set=utf8;

        修改数据库字符集
            ALTER DATABASE 数据库名称 character set=utf8;

    显示创建数据库相关信息
        SHOW CREATE DATABASE 数据库名称;

    带判断是否存在的创建数据库(不存在创建, 存在报警告)
        CREATE DATABASE IF NOT EXISTS 数据库名称;

        交互模式默认不显示警告, 可以通过\W开启警告显示
        显示警告命令:
            show warnings;

    删除数据库
        DROP DATABASE 数据库名称;

    重命名数据库
        使用系统的mv命令直接对数据库目录修改

    切换数据库
        USE 数据库名称;

-------------------------------------------------------------------------------
数据表管理
    创建数据表
        CREATE TABLE 表名 (字段名 类型 约束, ...);

        例:
            CREATE TABLE `student` (
                `id` int,
                `name` varchar(255) NOT NULL COMMENT "姓名",
                `sex` tinyint(1) NOT NULL DEFAULT '1',
                `age` int NOT NULL,
                PRIMARY KEY(`id`),
                UNIQUE KEY `name` (`name`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT "学生表";

    显示创建数据表信息
        SHOW CREATE TABLE 表名;

    删除表
        DROP TABLE 表名;

    清空表
        TRUNCATE TABLE 表名;

    查看表字段信息
        DESC 表名;

    修改表信息
        ALTER TABLE 表名 ENGINE=MEMORY;
        ALTER TABLE 表名 DEFAULT CHARSET=utf8;

    修改表字段信息
        添加字段到表最后
            ALTER TABLE 表名 ADD 字段名 类型 约束;

        添加字段到指定位置
            ALTER TABLE 表名 ADD 字段名 类型 约束 AFTER 表中某个字段名;

        添加字段到表第一位
            ALTER TABLE 表名 ADD 字段名 类型 约束 FIRST;

        删除字段
            ALTER TABLE 表名 DROP 字段名;

        修改字段信息
            ALTER TABLE 表名 MODIFY 字段名 类型 约束;

        修改字段信息(包括字段名)
            ALTER TABLE 表名 CHANGE 字段名 新字段名 类型 约束 AFTER 表中某个字段名;

    添加数据
        对应所有字段添加记录:
            INSERT 表名 VALUES(值, ...);

        添加一条记录:
            INSERT 表名(列名, ...) VALUES (值, ...);

        添加多条记录:
            INSERT 表名(列名, ...) VALUES (值, ...), (值, ...), ...;

    删除数据
        删除表所有记录:
            DELETE FROM 表名;

        删除表指定记录:
            DELETE FROM 表名 WHERE id=1;

    更新数据
        更新所有指定字段的记录:
            UPDATE 表名 SET 字段名=新值;

        更新指定字段的指定行记录:
            UPDATE 表名 SET 字段名=新值 WHERE 字段名=值;

    查询数据
        输出表中所有记录:
            SELECT * FROM 表名;

        输出表中指定记录:
            SELECT * FROM 表名 WHERE 字段名=值;

-------------------------------------------------------------------------------
数据类型
    数值类型
        tinyint             1   *
        smallint            2
        mediumint           3
        int或integer        4   *
        bigint              8
        float               4
        double              8   *

    字符串类型
        char        0-255       定长字符串      *
        varchar     0-255       变长字符串      *
        tinyblob    0-255       不超级255个字节的二进制
        tinytext    0-255       短文本字符串
        blob        0-65535
        text        0-65535                     *
        longblog    ...
        longtext    ...                         *

    日期时间类型
        date        3       日期
        time        3       时间
        year        1       年份
        datetime    8       日期时间
        timestamp   4       时间戳      *

-------------------------------------------------------------------------------
字段约束
    PRIMARY KEY         设置主键, 行的唯一标识
        INT PRIMARY KEY AUTO_INCREMENT  设置自增主键

    NOT NULL            字段数据不能为NULL, NULL不等于空, 代表不确定的值

    DEFAULT             字段数据的默认值
        timestamp not null default current_timestamp;
            设置字段添加记录自动获取当前时间戳

    UNIQUE              规定字段数据不能重复

    COMMENT             注释
        COMMENT "姓名"

-------------------------------------------------------------------------------
Python操作MySQL
    Python做为MySQL来使用

    安装Python操作MySQL的模块:
        pip3 install pymysql
            或
        pip3 install mysqlclient
            mysqlclient访问libmysqlclient库(C), 比pymysql效率高
            安装依赖C库(没有安装会报mysql_config):
                sudo apt install libmysqlclient-dev -y

    mysqlclient模块的使用
        import MySQLdb

        创建MySQL的连接对象
        conn = MySQLdb.connect(host='localhost', port=3306, user='root', passwd='123123', database='kyo', charset='utf8')

        生成游标对象(默认开启事务)
        db = conn.cursor()

        执行SQL语句(给服务器发送SQL)
        db.execute("select * from student")

        获取上一条SQL语句执行结果集
        data = db.fetchall()

        提交事务
        conn.commit()

        关闭链接对象
        conn.close()

-------------------------------------------------------------------------------
练习:
    创建员工表
        工号        int 主键
        姓名        varchar(20)
        性别        char(1)
        出生年月    date,
        入职年月    date,
        工资        decimal(10, 2),
        所属部门    部门编号
        上级领导    工号

    部门表
        部门编号    int 主键
        部门名称    varchar(30)
        部门位置    varchar(50)

-------------------------------------------------------------------------------
作业: 学校管理OA系统
    学校 教师 课程 班级 学生 成绩

    教师 课程 班级所属学校
    学生所属班级
    教师与课程之间的关系
    成绩由学生和课程关联
    通过学生可以查询学生学了哪些课程
    通过课程可以查询此课程被哪些学生学了

-------------------------------------------------------------------------------
Kyo MySQL Vim IDE的使用:

第一步: 将以下代码追加到~/.vimrc.local, 不能重复追加
" -----------------------------------------------------------------------------
"  MySQL
" -----------------------------------------------------------------------------
function! KyoMySQLCmdView()
    let file = GetFileName()
    silent exec ':w'

    if bufwinnr(2) == -1
        " silent exec 'botright 15 split  -MySQL-'
        silent exec 'botright split  -MySQL-'
    elseif winnr() == 1
        silent exec 'wincmd w'
    endif
    setlocal modifiable
    silent exec 'normal ggVGx'
    silent exec ':r! ksql run $(realpath '.file.')'
    setlocal buflisted
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal nomodifiable
    setlocal noswapfile
    setlocal nowrap
    silent exec 'wincmd w'
endfunction

nnoremap ,sq :call KyoMySQLCmdView()<CR><CR>

第二步: 复制ksql脚本到可执行目录中
    将/kyo/tools/ksql(教师共享目录)复制到/usr/local/bin下并且给可执行权限
    再将ksql文件中的default_passwd的值改成本地MySQL的root密码

第三步: 运行测试
    运行ksql命令: 会自动打开VIM并且分屏, 上屏为输入, 下屏幕为输出
    编辑SQL命令完成后在vim普通模式下输入,sq会自动运行SQL并且在下屏输出结果

