一、修改一个现有的项目

要求：

1. 把多个模板文件中共同的内容放到base.html模板中
2. 其它需要共用base.html 中的内容的模板通过 extends 继承base.html
3. 在base.html 的页面尾部，用include包含一个logout.html模板

范例代码：

继承base.html 模板：

    {% extends "polls/base.html" %}

    {% block content %}
    <ul>
      {% for q in latest_questions %}
      <li><a href="{% url 'polls:detail' q.pk %}">{{ q.question_text }}</a></li>
      {% endfor %}
    </ul>

    {% endblock %}

    {% block title %}Question Index{% endblock %}


包含logout.html 模板：

    {% include "polls/logout.html" %}



二、用ListView来取代原有的index页面的view

参考流程：

1. 导入django.views.generic.ListView
2. 定义新的类QuestionList，继承 ListView

    class QuestionList(ListView):
        model = Question

3. 重新定义URL，其中的view写成 QuestionList.as_view()

    url(r'^index2/', views.QuestionList.as_view(), name='index2'),

4. 根据错误信息创建新的模板文件

    TemplateDoesNotExist at /polls/index2/

    polls/question_list.html


三、在ListView中自定义获取模型数据的方法，此方法根据URL中的参数来做过滤

参考步骤

1. 设计URL
2. 修改view，在view中通过 self.kwargs 来获取在处理URL的过程中取得的关键字参数，用self.args 来获取所有的位置参数

URL:

    url(r'^index2/(?P<p>[a-zA-Z0-9]+)/', views.QuestionList.as_view(), name='index2'),

View:

    def get_queryset(self):
        now = timezone.now()
        latest_questions = self.model.objects.filter(
                pub_date__lt=now,
                question_text__startswith=self.kwargs['p'],
                ).order_by('-pub_date')
        return latest_questions


四、在ListView中修改将要传给模板的context数据，在其中增加一个名叫now的新数据

参考步骤：

1. 改写父类 (ListView) 中的方法 get_context_data：

    def get_context_data(self, *args, **kargs):
        context = ListView.get_context_data(self, *args, **kargs)
        context['now'] = timezone.now()
        return context

2. 修改模板文件，显示新的数据

    <h1>{{ now }}</h1>



五、使用DetailView来显示Question对象的详细信息

参考步骤：

1. 继承 django.views.generic.DetailView
2. 相应地修改url配置
3. 运行服务器，访问页面，根据错误信息设定 template_name 和context_object_name 属性



六、写一个表单

要求：

1. 包含字段 username, password, age, cell
2. 当用户直接在浏览器地址栏输入地址访问时，显示表单

3. 当用户点击提交按钮时，处理表单数据，如果处理成功，
   就输出所有的表单数据，否则就让用户重新提交。

范例form代码：

class UserForm(forms.Form):
    username = forms.CharField(max_length=5)
    password = forms.CharField()
    age = forms.CharField()
    cell = forms.CharField()


范例view代码：

def signup(request):
    if request.method == 'POST':
        form = UserForm(request.POST)
        if form.is_valid():
            print(form.cleaned_data)
            return HttpResponse('successfully signed up.')
    else:
        form = UserForm()
    return render(request, "polls/signup.html", context={'form': form})



七、操练表单自带的验证

承接练习六，然后做修改，表单按照以下代码修改：

class UserForm(forms.Form):
    username = forms.CharField(max_length=8)
    password = forms.CharField(min_length=16)
    age = forms.IntergerField()
    cell = forms.CharField()

1. 在浏览器输入一些无效的值，观察浏览器的反映

2. 在交互式的python环境，用requests库提交表单

    1. 临时关闭项目的csrf中间件（生产环境不应该关闭，这里仅作为实验室测试目的）
    2. 用requests.post提交一些无效的表单数据，用浏览器观察返回的结果

    辅助测试函数:

        def check(r):
            open('/tmp/debug.html', 'w').write(r.text)
            os.system('firefox file:///tmp/debug.html')

    范例代码：

        import os
        import requests

        r = requests.post('http://localhost:8000/polls/signup/', data={
                'username': 'alicexxxxx',
                'password': 'abc',
                'age': '18',
                'cell': '18612345678'}
                )

        check(r)



八、承接上例，将表单项与其错误信息拆分开

范例代码：

<form method="post">
  {% csrf_token %}
  <p>Name: {{ form.username }}<span class="err">{{ form.username.errors }}</span></p>
  <p>Password: {{ form.password }}<span class="err">{{ form.password.errors }}</span></p>
  <p>Age: {{ form.age }}<span class="err">{{ form.age.errors }}</span></p>
  <p>Cell: {{ form.cell }}<span class="err">{{ form.cell.errors }}</span></p>
  <input type="submit" value="注册">
</form>



九、解决错误信息的问题

写一个模板的“标签”，用来获取表单错误信息的第一个元素

参考流程：

1. 在应用的目录下创建一个名叫templatetags 的目录
2. 在目录templatetags下面创建一个名叫mytags.py的文件

3. 在mytags.py文件中添加类似下面的代码：

    from django import template
    register = template.Library()
    @register.simple_tag
    def errmsg(errlist):
        if errlist:
            return errlist[0]
        else:
            return ''

4. 在模板中使用自定义的模板标签errmsg

    1. 加载自定义的模板标签
        {% load mytags %}
    2. 使用标签
        {% errmsg form.username.errors %}



十、自定义表单项的校验函数

参考流程

1. 在应用的forms.py文件中，定义校验函数

    def cellphone_validator(value):
        if len(value) != 11:
            raise ValidationError('电话号码必须是11位数')
        if not value.isdigit():
            raise ValidationError('电话号码必须是纯数字')

2. 修改表单类的定义，给需要使用自定义校验函数的表单项设定validators属性

    class UserForm(forms.Form):
        username = forms.CharField(max_length=5)
        password = forms.CharField()
        email = forms.EmailField()
        age = forms.IntegerField()
        cell = forms.CharField(validators=[cellphone_validator])
