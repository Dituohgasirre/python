1. 数据库没有文章的时候，页面上不应该有文章的链接
2. 点击主页的评论链接，应该打开评论对应的文章，且定位到该评论的位置 (html 的a标签)
3. 点击主页的分类链接，应该去到搜索页面，仅显示此类里面的文章
4. 点击主页的归档链接，应该去到搜索页面，仅显示指定时间段的文章
    M.objects.filter(pub_date__gt=start_time, pub_date__lt=end_time).order_by('-pub_date')
5. 搜索功能，可以搜索文章标题，内容，作者，标签，类别，评论中的文字，最简单的实现是仅仅搜索文章的标题或者内容
6. 点击主页的标签链接，应该去到搜索页面，仅显示使用了此标签的文章
7. 点击Calendar 上的日期，应该去到搜索页面，仅显示指定日期的文章
8. 关于分类的设计，需不需要设计成分级的结构？为简单实现起见，可以设置成一级扁平结构。点击导航栏的分类链接，弹出下拉菜单，显示比如说10个分类，点击分类就进入搜索页面，显示此类下的文章。如何显示所有的分类？可以在主页面的Categories版块添加一个链接，用来显示所有的分类。
9. 登录成功后，不应该再出现“登录”和“注册”字样，应该改成“登出”/“注销”，并且链接到注销页面
10. 可以考虑详情页不显示首页所显示的信息，比如说分类，tags等信息。
11. 仍需实现评论表单功能
12. 仍需实现路径提示
13. 应提供一个链接回到主页
14. 仍需实现瀑布流更新当前页
15. 仍需实现前后文章的跳转链接
16. 仍需实现登录页面的验证码
17. 注册失败时应有相应的错误提示信息


源码剖析
=================
1. 仍需添加search相关的url
2. 注意代码风格，顶层函数/类前后有两个空行，非顶层的只需要一个空行
3. 给author创建一个独立的model
4. 文章的内容长度可能不够
5. 文章的pub_date有可能是将来时间，所以不应该用auto_now_add=True
6. 应给评论(comment)创建独立的模型，关联到Blog模型
7. 必要时候应该给代码写适当的注释
8. 调整模板，通过继承简化设计
9. 一个客户端在5分钟之内最多只能提交1次评论

    def handle_comment(request):
        last_comment_time = request.session['last_comment']
        now = int(time.time())
        if now - last_comment_time <= 300:
            return HttpResponse('you comment to often')

        request.session['last_comment'] = 1516344212
