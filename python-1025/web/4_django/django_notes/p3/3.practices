一、用HttpResponse回复404状态码和实现302重定向

1. 在view函数中return HttpResponse(status=404)
2. 在另外一个python交互式环境中，用requests.get来获取网页
3. 查看requests.get的返回状态和文本
4. 在view函数中return HttpResponse(status=302)，并设置新的URL
5. 在另外一个python交互式环境中，用requests.get来获取网页
6. 查看requests.get的返回状态和文本


二、在views中返回404状态，并指定错误页面的内容

from django.http import HttpResponse
def index(request):
    html = '<html><body>File not found.</body></html>'
    return HttpResponse(html, status=404)


三、在views中抛出Http404异常，并用指定的函数来响应

handler404 = page_not_found


四、在获取不到数据时手动抛出Http404异常


五、使用get_object_or_404来获取数据，测试记录不存在和多记录匹配时的响应结果

c = get_object_or_404(Contact.objects.filter(age__lte=20), pk=contact_id)


六、用get_list_or_404来获取数据，给get_list_or_404函数传递一个设置了过滤条件的QuerySet


七、使用handler404和模板自定义一个404错误页面


八、创建两个view函数，并使用模板来渲染结果

要求：
    1. index函数用于显示所有在线用户的列表
        1. 网页标题显示当前时间
        2. 每个用户显示名字，点击名字可以进入用户详细信息页面
    2. detail函数用于显示单个用户的详细信息


九、承接练习8, 移除模板中硬编码的URL，并用上url命名空间

1. 在模板中使用 {% url 'name' arg %} 来转换url
2. 在urls.py 中给url设置名字，并设定名字空间


项目部分

1. 创建这几个view函数: detail, results, vote
2. 设计url，使得以下url关联到指定的view函数：

    /polls/             <-- index view
    /polls/5/           <-- detail view，显示id为5的question的详情
    /polls/5/results/   <-- result view, 显示id为5的question的投票结果
    /polls/5/vote/      <-- vote view，处理投票请求

    给所有的url设置适当的名字

3. 修改index view函数，用来显示最新的5条问题
4. 通过模板美化index view的结果，一行一个记录，点击每一行的文字可以显示指定记录的详情，不使用硬编码的URL
5. detail view中，如果找不到所需的记录，则给客户端回复404错误
6. 在question的详情页面(detail.html)中，显示问题的文本，和所有选项的文本，每个选项一行
7. 给polls应用加上名字空间，并相应地更改urls.py文件和模板文件
