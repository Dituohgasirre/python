给HttpResponse设置任意的返回码

Django并没有为所有的http返回码都定义了子类，仅有部分返回码有专用的子类，比如说301, 302, 404, 403, 404, 500等。如果需要返回指定返回码，可以给HttpResponse指定 status 关键字参数。

范例：

return HttpResponse(status=201)



在view中返回错误

在view中可以通过抛出异常的方法返回错误，也可以通过返回相应的HttpResponse来返回错误。

raise Http404("Poll does not exist")
return HttpResponseNotFound('<h1>Page not found</h1>')

当抛出Http404异常时，handler404所指定的可执行对象将会被执行。



自定义常见的错误响应view

Django内置了几种默认的错误页面响应view，它们的名字和默认值分别是：

handler400: django.views.defaults.bad_request
handler403: django.views.defaults.permission_denied
handler404: django.views.defaults.page_not_found
handler500: django.views.defaults.server_error

可以根据需要更改，只需要在项目的 urls.py 模块中按照以下方式重新赋值即可：

handler404 = page_not_found
handler500 = 'app.views.server_error'

这里的page_not_found 是一个可执行对象，'app.views.server_error' 是一个字符串，表示一个python可执行对象的导入路径。两种可执行对象表示法，用任何一种都可以。




基于http请求中的方法限制对view的访问

可以通过Django内置的一些装饰器，限制对view函数的访问。如果请求的类型不满足要求，Django将会返回 HttpResponseNotAllowed。

范例：

from django.views.decorators.http import require_http_methods

仅接受指定的请求，方法名字用大写

@require_http_methods(["GET", "POST"])
def my_view(request):
    pass

仅接受GET请求

@require_GET
def my_view(request):
    pass

仅接受POST请求

@require_POST
def my_view(request):
    pass

仅接受GET, HEAD请求

@require_safe
def my_view(request):
    pass




在视图中获取模型的数据

在交互式的python环境中，可以使用Django的模型API来操作数据，做常规的增删改查操作，这些操作在view中有一模一样的用法。

用QuerySet.get 获取模型数据时，如果数据不存在，就会有model.DoesNotExist异常产生，这个时候可以处理此异常，并抛出Http404异常，Http404异常将会被Django默认自动处理。

快捷函数get_object_or_404 可以在找不到记录时自动抛出Http404异常。需要注意的是，这个函数和QuerySet.get方法一样，当有多个记录返回时，会有MultipleObjectsReturned抛出。

get_list_or_404函数与get_objects_or_404类似，不过这个函数返回一个列表，当列表为空时，就会抛出Http404异常。



模板的路径设计

通常，模板文件的目录存放在应用的目录下，路径为 <appname>/templates/<appname>/filename.html。第二个<appname>存在的目的是为了防止名字冲突，因为当一个project中有多个app时，多个app可能使用同名的模板文件，比如说index.html文件，这样，就需要有一种方法来区分两者，这里在模板文件的路径前面加上应用的名字。


在view中使用模板来渲染数据

通过模板来渲染内容，生成最终的结果，通常使用render函数。

范例：

return render(request, "polls/index.html", context={'title': 'hello world'})


在模板文件中，可以使用python的变量，可以获取对象的属性；模板文件也有自身的流程控制结构，像if，for等。

范例代码：

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
{% endif %}

代码中，question是从context中传过来的python对象，question.question_text是对象的属性，或者是对象(dict对象)的key。{{ ... }} 结构中是变量置换，变量名被置换成变量的值，{% ... %} 结构中可以摆放if，for等控制语句。



移除模板中硬编码的url

在模板中硬编码URL会给程序的维护带来不便，随着URL数量的增长，这种维护的负担会变大；另外，硬编码URL也容易造成错误。

在模板中，可以使用 {% url 'name' arg %} 这样的语句来做动态生成url，避免了直接写URL字符串（硬编码）。

范例：

项目的urls.py:
    url(r'^polls/', include('polls.urls'))

名叫polls的应用的urls.py:
    url(r'^(?P<question_id>[0-9]+)/$', views.detail, name='detail')

那么：
    <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>

就可以写成：
    <li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>


当一个项目中有多个app时，为了使模板中的 {% url ... %} 能够无歧义地得到正确的url地址，需要给url配置加上名字空间。

操作步骤：

1. 在urls.py 中用 app_name = "polls" 这种方法来设置一个应用的名字空间
2. 在模板中使用这样的方式生成url，下面的polls是应用的名字，detail是url的名字
    {% url 'polls:detail' question.id %}
