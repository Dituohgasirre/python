HTML表单form中，action属性是一个URL，这个URL是处理表单请求的URL，如果没有指定，默认就是当前的URL。form的method属性用于指定提交表单所使用的HTTP方法，一般使用的方式是get或者post。

通过get方法提交表单时，表单数据附加在url后面，形式是 http://example.com/process/?a=1&b=2
通过get方法提交表单时，表单数据在标准输入中。

一般的使用规则是这样：当提交表单是要改变服务端的状态时，使用post方法，当只需要从服务器获取数据时，使用get方法。



在模板中，可以通过 {% for %} 循环的forloop.counter 来获取当次迭代的次数，次数字从1开始；如果需要获取从0开始的次数，可以使用forloop.counter0。

{% for choice in question.choice_set.all %}
    <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
    <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br />
{% endfor %}




当时用POST形式的表单时，需要考虑“跨域请求欺骗”攻击的潜在威胁。“跨域请求欺骗”通过伪造表单数据，然后向服务器发送有恶意的请求，达到在用户不知请的情况下，以合法的身份发送数据的目的。Django包含了简单的组件，可以抵御这样的攻击。只需要在所有指向内部URL的form里面使用Django的模板标签 {% csrf_token %}

客户端通过表单传给服务器的数据，可以通过request.GET, request.POST来获取，这两个对象都是类似字典的对象，通过这些对象可以访问客户端提交上来的数据。



在view函数中从url的名字反推出url地址

在view函数中可以通过django.urls.reverse 函数来计算出某个URL地址，避免硬编码URL，功能类似模板中的 {% url ... %} 标签。

有以下url配置

    项目里的 urls.py
    url(r'^polls/', include('polls.urls'))

    polls应用里的urls.py
    url(r'^(?P<question_id>[0-9]+)/vote/$', views.vote, name='vote')

运行函数

    reverse('vote', args=(123,))

将会返回

    /polls/123/vote/



重定向页面到指定的url

重定向页面操作可以手动实现，也可以通过return一个HttpResponseRedirect对象来实现。

范例：

    url = '/polls/1/results/'
    return HttpResponseRedirect(url)




自定义模板的过滤器

在应用的目录下建立templatetags目录（此目录必须是一个包，故需加上 __init__.py 文件），在该目录下创建模块，在模块里按照以下代码方式书写过滤器：

文件myfilters.py代码：

from django import template
register = template.Library()
@register.filter(name="mine")
def do_mine(val):
    return 'mine: %s' % val

然后在模板文件前面用 {% load myfilters %} 来加载自定义的过滤器即可使用。





使用F对象来避免更新数据库时的race condition

如果有两个进程同时做以下操作，可能会造成首先提交的请求的数据丢失，也就是说，如果age原先的值是20, 则两个进程的操作完成后，age的值不会变成22, 而是21：

    record = Contact.objects.get(pk=1)
    record.age += 1
    record.save()

通过F对象，可以使加法操作在数据库内部进行，避免了race condition.

from django.db.models import F

record = Contact.objects.get(pk=1)
record.age = F('age') + 1
record.save()
