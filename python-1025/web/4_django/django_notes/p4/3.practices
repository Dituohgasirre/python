一、书写一个表单，按以下要求测试：

1. 不指定action属性，通过浏览器调试器查看实际的action值
2. 不指定method属性，通过浏览器调试器查看实际的method值


二、用模板输出一个列表中的值，并把每个值的位置信息一并输出

1. 使用forloop.counter
2. 使用forloop.counter0


三、使用POST方法实现一个表单

要求：
1. 把客户端传上来的数据打印到测试服务器的终端上
2. 在模板中加上{% csrf_token %} 以解决服务器的错误
3. 不使用{% csrf_token %}，而是使用csrf_exempt 来解决服务器的错误


四、用POST方法设计一个表单，并在处理完表单请求后重定向到另外一个页面

要求：
1. 用HttpResponseRedirect来重定向
2. 用reverse来获取新的URL地址


五、在模板中使用pluralize来适当的文字

1. 当candy的数量是一个时，显示 candy
2. 当candy的数量不是一个时，显示 candies

参考模板代码：
<p>{{ candy.count }} cand{{ candy.count|pluralize:"y,ies" }}</p>


六、按以下要求写一个简单的模板过滤器

要求：
1. 过滤器名字叫做 rev
2. rev过滤器把接收到的字符串中的字符左右颠倒

步骤：

1. 在应用的目录下建立templatetags目录，在目录中创建__init__.py 文件
2. 在templatetags目录中创建文件myfilters.py，写入类似下面的代码：
    from django import template
    register = template.Library()
    @register.filter(name="rev")
    def do_mine(val):
        return val[::-1]
3. 在模板文件前面用 {% load myfilters %} 来加载自定义的过滤器
4. 在需要使用的地方这样使用：{{ "1234"|rev }}


七、在交互式界面测试F对象的功能

1. 测试不使用F对象时的竞争状况
2. 验证使用了F对象后不再存在竞争的状况

from django.db.models import F
c.votes = F('votes') + 1


项目部分

1. 修改Question的detail页面的模板
    1. 在页面显示问题的文本
    2. 显示一个表单，用于用户提交投票
    3. 表单提交给名叫vote的view函数，使用post方式
    4. 表单中包含“跨站伪造请求”防御标签
    5. 表单中显示问题的所有Choice，提供radio按钮让用户点击

2. 实现view函数vote
    1. 如果获取不到指定的Question，应该返回404错误
    2. 如果用户选择的Choice不存在，或者没有选择任何Choice，
       则返回错误信息，并重新显示表单让用户选择
    3. 如果用户的选择是有效的，就更新Choice记录的votes属性，
       并把用户重定向到Question的results页面，不应在view中
       硬编码results的url

3. 实现view函数results
    1. 如果Question的id不存在，返回404错误

4. 书写results的模板文件results.html
    1. 显示Question的文本
    2. 显示Question所关联的Choice的文本，及每个Choice的投票数
    3. 如果投票数是1, 应显示单数，否则应显示复数
    4. results页面底部提供一个链接，指向投票页面(detail页面)
