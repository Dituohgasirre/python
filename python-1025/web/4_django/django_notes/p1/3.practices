1. 用pip 安装Django 1.11 版

    $ pip install django==1.11

2. 创建一个Django项目和应用，并在项目的设置中注册应用

    python manage.py startapp hello
    vi mysite/settings.py

        INSTALLED_APPS = [
            'hello',
            'django.contrib.admin',
            'django.contrib.auth',
            ...
        ]

3. 创建一个名叫hello的项目，当访问根目录时，输出"Hello Python World."

    要点：
        1. 修改urls.py，仿照原有的关于admin的url写法，指向一个函数
        2. 在urls.py 里面实现函数

    from django.http import HttpResponse

    def greeting(request)
        return HttpResponse("Hello Python World.")

    urlpatterns = [
        url(r'^', greeting),
    ]


4. 创建一个名叫mysite的项目，在其中创建一个名叫greeting的应用

    要求：
        http://localhost:8000/greeting/morning/     --> 输出good morning
        http://localhost:8000/greeting/afternoon/   --> 输出good afternoon
        http://localhost:8000/greeting/evening/     --> 输出good evening

    要点：
        1. 修改mysite/urls.py，把所有greeting 的url转发给greeting应用
        2. 在greeting的urls.py 里面做url到view的绑定
        3. 在greeting/views.py 中实现三个view函数

    参考做法：

    创建项目和app
    django-admin startproject mysite
    cd mysite
    python manage.py startapp greeting

    写 mysite/urls.py

        from django.conf.urls import include
        urlpatterns = [
            url(r'^greeting/', include('greeting.urls')),
        ]

    写greeting/urls.py

        from . import views
        urlpatterns = [
            url(r'^morning/', views.morning),
            url(r'^afternoon/', views.afternoon),
            url(r'^evening/', views.evening),
        ]

    写greeting/views.py

        from django.http import HttpResponse
        def morning(request):
            return HttpResponse('good morning.')
        def afternoon(request):
            return HttpResponse('good afternoon.')
        def evening(request):
            return HttpResponse('good evening.')




5. 设置一个url，响应网址 /Alice/morning/ ，把接收到的参数中morning部分通过位置参数的形式传给view函数，view函数输出相应的问候信息。

6. 设置一个url，响应网址 /Alice/morning/ ，把接收到的参数中morning部分通过关键字参数的形式传给view函数，view函数输出问候信息。

7. 设置一个url，响应网址 /Alice/morning/ ，把接收到的参数中morning部分通过关键字参数的形式传给view函数，并给view函数传输额外的参数，额外参数是 {'time': '09:00'}，view函数输出问候信息，并输出额外参数中的时间信息。

8. 写一个程序，获取系统状态：CPU最近1分钟，5分钟，15分钟的负载；内存的使用状况信息

要求：
    1. 用命令uptime 获取CPU的信息，取最后三段信息，转成小数
    2. 用free -b获取内存信息，只保留第二行的输出
    3. 按照客户端的网址，分别获取CPU，内存信息，并返回给客户端
    4. URL写法：
        http://localhost:8000/monitor/cpu/  <-- 返回CPU信息
        http://localhost:8000/monitor/ram/  <-- 返回内存信息


项目部分

1. 创建一个名叫mysite的项目
2. 创建一个名叫polls的应用，并注册到mysite中
3. 写一个view函数，名叫index，此函数输出 "This is the index" 字符串
4. 配置应用和项目的urls.py，使得访问 http://localhost:8000/polls/ 时调用index函数，给此url命名叫index
