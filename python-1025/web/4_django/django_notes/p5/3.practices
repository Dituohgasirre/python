一、写一个测试用例，测试并相应修改模型，确保当pub_date是将来时间时Question模型的was_published_recently 返回False

文件models.py中Question里面，添加一个方法

def was_published_recently(self):
    now = timezone.now()
    # 正确的写法
    # return now - timedelta(days=1) < self.pub_date < now

    # 有bug的写法
    return now - self.pub_date < timedelta(days=1)

参考测试代码

from datetime import timedelta
from django.utils import timezone
from django.test import TestCase
from .models import Question

class TestQuestionModel(TestCase):

    def test_was_published_recently(self):
        delta = timedelta(hours=23,minutes=59,seconds=59)
        q = Question(pub_date=timezone.now() - delta)
        self.assertIs(q.was_published_recently(), True)

        delta = timedelta(hours=24)
        q = Question(pub_date=timezone.now() - delta)
        self.assertIs(q.was_published_recently(), False)

        q = Question(pub_date=timezone.now() + delta)
        self.assertIs(q.was_published_recently(), False)



二、操练在交互式的环境中用django.test.Client来测试view的行为

1. 获取网页
2. 获取状态
3. 获取网页内容
4. 获取context


三、用TestCase测试view的行为，并修改view使测试用例通过

要求：
1. 当不存在任何问题时，index页面应显示适当的信息
2. 发布时间为过去时间的问题显示在index页面
3. 发布时间为将来时间的问题不显示在index页面上

参考代码

在polls/tests.py 中添加以下代码：

class TestQuestionPubdate(TestCase):

    def test_future_question(self):
        time = timedelta(days=4) + timezone.now()
        q = Question.objects.create(question_text="future question", pub_date=time)
        url = reverse('polls:index')
        response = self.client.get(url)
        self.assertQuerysetEqual(response.context['latest_questions'], [])


四、用TestCase测试view的行为，并修改view使测试用例通过

要求：
1. 查询发布时间为过去时间的问题的detail页面时正常显示
2. 查询发布时间为将来时间的问题的detail页面时返回404错误
