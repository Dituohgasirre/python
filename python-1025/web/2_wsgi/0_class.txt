WSGI(Web Server Gateway Interface):
    由于CGI会不停有进程消耗, 导致服务器性能下降

    FastCGI: 解决了CGI进程消耗问题, 创建进程池来工作, 通过网络通信进行交互

    WSGI: 与FastCGI类似, 是Python专用, WSGI是规范, 规范Web服务器与Web应用程序之间通信

Python提供wsgiref包实现WSGI服务器:
    from wsgiref.simple_server import make_server
    make_server("0.0.0.0", 8000, client_handler).serve_forever()

    client_handler是WSGI Web应用程序的回调函数, WSGI规定此函数的参数
    def client_handler(env, response):
        response("200 OK", [('Content-Type', 'text/html')])
        return [b'Hello World']

    Python自带WSGI服务器性能非常弱, 仅限于测试

Apache配合WSGI使用:
    Apache提供了mod-wsgi模块实现WSGI的使用
    安装Apache的mod-wsgi模块: sudo apt install libapache2-mod-wsgi-py3 -y

    <VirtualHost *:80>
        ServerName w
        ServerAdmin iprintf@qq.com
        DocumentRoot /kyo/web/2_wsgi
        <Directory /kyo/web/2_wsgi>
            DirectoryIndex  index.py
            Require all granted
        </Directory>
        WSGIScriptAlias / /kyo/web/2_wsgi/index.py

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

    </VirtualHost>

-------------------------------------------------------------------------------
uWSGI:
    uWSGI是一个工具, 是一个Web服务器, 比FastCGI速度快10倍
    生产环境: nginx + uwsgi + python + django
    安装uWSGI: pip3 install uwsgi

    运行uWSGI服务器:
        uwsgi --http :9000 --wsgi-file=index.py
        index.py源码即是wsgi应用程序的代码

    uWSGI的配置(ini):
        [uwsgi]
        # http uWSGI独立做Web服务器所要配置
        http  = 3.3.3.3:8000
        # socket uWSGI通过Nginx来代理使用, 比http通信更高效
        socket = 127.0.0.1:8001
        # 设置uWSGI服务器状态查看地址
        stats = 127.0.0.1:9000
        # 设置uWSGI家目录
        chdir = /kyo/web/2_wsgi
        #设置wsgi协议入口文件
        wsgi-file = index.py
        # 设置uWSGI启动进程的数量
        processes = 4
        # 设置uWSGI启动每个进程的线程数量
        threads = 2
        # 设置uWSGI的日志文件
        deamonize = /var/log/uwsgi/uwsgi.log
        # 开启检测源码变动更新
        py-autoreload = 1

    运行uwsgi:
        uwsgi uwsgi.ini

配置Apache与uwsgi配合使用:
    Apache作为代理服务器, 所以必须安装Apache代理模块
    安装Apache的代理模块:
        sudo apt install libapache2-mod-proxy-uwsgi -y
        sudo apt install libapache2-mod-uwsgi -y

    Apache2的和uwsgi配合配置(必须写在/etc/apache2/sites-enabled/里):
        <VirtualHost *:81>
            ServerName u
	        ProxyPass / uwsgi://127.0.0.1:9000
        </VirtualHost>

    重启Apache2
        sudo service apache2 restart

    开启UWSGI服务
        uwsgi --ini uwsgi.ini


配置Nginx与uwsgi配合使用:
    安装Nginx: sudo apt install nginx -y
        默认与Apache相冲突(Apache服务关闭或改变Apache2的端口号)

    配置Nginx作为uwsgi的代理服务器: /etc/nginx/sites-enabled/default
        location / {
            include uwsgi_params;
            uwsgi_pass 127.0.0.1:9000;
        }

    重启Nginx
        sudo service nginx restart

    开启UWSGI服务
        uwsgi --ini uwsgi.ini

-------------------------------------------------------------------------------
Python Web编程:
    CGI:
        Apache + Python

    WSGI:
        Python(wsgiref.simple_server.make_server)
        Apache(mod-wsgi-py3) + Python (自己写的模块需要添加路径)
        uWSGI(Web服务器):
            Python
            Apache(反向代理) + Python
            Nginx(反向代理) + Python

