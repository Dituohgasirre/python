1. 仿照以下范例操练

In [201]: fig = plt.figure()
In [204]: axes = fig.add_subplot(221)
In [205]: ax = fig.add_subplot(222)
In [206]: ax = fig.add_subplot(223)
In [207]: ax = fig.add_subplot(224)
In [208]: fig.axes
Out[208]:
[<matplotlib.axes._subplots.AxesSubplot at 0x7f9b33553320>,
 <matplotlib.axes._subplots.AxesSubplot at 0x7f9b33e451d0>,
 <matplotlib.axes._subplots.AxesSubplot at 0x7f9b33be9a58>,
 <matplotlib.axes._subplots.AxesSubplot at 0x7f9b34318668>]

In [209]: type(fig.axes)
Out[209]: list

In [210]: plt.plot([1,2,3])
Out[210]: [<matplotlib.lines.Line2D at 0x7f9b34036ac8>]

In [212]: ax1 = fig.axes[0]
In [214]: plt.axes(ax1)
Out[214]: <matplotlib.axes._subplots.AxesSubplot at 0x7f9b33553320>

In [215]: plt.plot([5,4,3])
Out[215]: [<matplotlib.lines.Line2D at 0x7f9b64329470>]


2. 创建一个图，画一条线，以不同的dpi保存成png图片，对比图片的质量

fig = plt.figure(figsize=(8,6))
plt.plot([1,2,3])
fig.savefig('a.png', dpi=50)
fig.savefig('b.png', dpi=100)
!gwenview *.png
!eog *.png


3. 按要求操作

    1. 创建一个图
    2. 在图中创建3个坐标系
    3. 分别使用plt.subplot 和 fig.add_subplot
    4. 测试plt.subplots 与plt.subplot 的区别


4. 按要求操作

    1. 创建一个图，在图中创建4个坐标系
        fig, axes = plt.subplots(2, 2)
    3. 用交互的方式在三个坐标系之间切换，打上不同的线条
        plt.axes(axes[0,0])         <-- 切换到第一个
        plt.axes(axes[0,1])         <-- 切换到第二个
        plt.plot([1,2,3,4])         <-- 打线条


5. 测试坐标系的横轴和纵轴的比例
    1. 创建一个图，一个坐标系
    2. 设置横轴和纵轴的数据范围为 0 ~ 2
        ax.set_xlim(0,2)
        ax.set_ylim(0,2)
    3. 在坐标系中打出一条线
    4. 设置aspect 为0.5, 观察线条的斜率变化
        ax.set_aspect(0.5)
    5. 设置aspect 为1, 观察线条的斜率变化
        ax.set_aspect(1)
    6. 设置aspect 为2, 观察线条的斜率变化
        ax.set_aspect(2)
  

6. 操练格子的显示

    1. 显示格子
        plt.grid()
    2. 在坐标系中打出若干个点，确保有点落在格子交叉点上
        N = 7
        X = np.arange(1,N,1)
        Y = np.arange(1,N,1)
        ax.set_xticks(np.arange(1,N))
        ax.set_yticks(np.arange(1,N))
        plt.scatter(X, Y, 200)
    3. 如果格子线遮住点，就增大点的zorder值
        p = ax.collections[0]
        p.zorder += 10
        plt.draw()
    4. 显示小刻度，显示小刻度的格子线
        ax.minorticks_on()
        plt.grid(which='minor')
    5. 设置大刻度的格子线为绿色实线，小刻度的格子线为灰色虚线
        plt.grid(which='major', color='g', linestyle='-')
        plt.grid(which='minor', color='grey', linestyle='--')


7. 操练刻度的相关操作

    1. 获取X轴的刻度值
    2. 获取X轴的刻度标签
    3. 获取X轴的刻度线条
    4. 设置X轴的刻度值为 np.arange(4)
    5. 设置X轴的刻度标签为 ['red', 'yellow', 'blue', 'green']
    6. 把X轴的刻度线全部设置为红色
    7. 显示X轴上方的刻度，并设置其上所有刻度线的颜色为绿色

        lines = ax.get_xticklines()
        for i, line in enumerate(lines):
            if i % 2 == 0:
                line.set_color('red')
            else:
                line.set_color('green')


8. 操练轴的数据范围

    1. 在坐标系中打出 -π 到 +π 之间的256个数的正弦值的曲线
        X = np.linspace(-np.pi, np.pi, 256)
        Y = np.sin(X)
    2. 设置X轴的数据范围为X轴数据的极值
        l = X.min()
        g = X.max()
        ax.set_xlim(l, g)
    3. 设置Y轴的数据范围为X轴数据的极值
    4. 设置X轴的数据范围，使曲线与坐标轴之间有一定的距离
    5. 设置Y轴的数据范围，使曲线与坐标轴之间有一定的距离


9. 操练坐标轴线的操作

    1. 在坐标系中打出 -π 到 +π 之间的256个数的正弦值的曲线
        X = np.linspace(-np.pi, np.pi, 256)
        Y = np.sin(X)
        plt.plot(X, Y)
    2. 隐藏所有的刻度
        ax = plt.gca()
        ax.set_xticks([])
        ax.set_yticks([])
    3. 隐藏上面和右边的轴线
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
    4. 设置左边的轴线为红色，下边的轴线为蓝色
        ax.spines['left'].set_color('red')
        ax.spines['bottom'].set_color('blue')
    5. 移动左边和下边的轴线到数据的零点
        ax.spines['left'].set_position('zero')
        ax.spines['bottom'].set_position('zero')


10. 按要求操练线的操作
    1. 在一个坐标系中打出 0-1 之间的10个点的正弦和余弦值
        X = np.linspace(0,1,10)
        Y1 = np.sin(X)
        Y2 = np.cos(X)
    2. 用一条命令打出两条线，使用不同的颜色，风格，线宽
    3. 获取图中的两条线的对象
        lines = plt.plot(X, Y1, 'r-', X, Y2, 'b--')
        line1, line2 = lines
    4. 修改两条线的外观，就是颜色，宽度，风格
    5. 给两条线加上不同的标记(marker)
        line.set_marker('o')
        line.set_marker('s')
        line.set_marker('D')
    6. 给线上的标记设置不同的颜色
        line.set_markerfacecolor('r')
        line.set_markerfacecolor('g')
    7. 给线上的标记设置不同的大小
        line.set_markersize(200)
        line.set_markersize(100)
    7. 设置一个相对较大的标记点，然后设置标记点的边缘为红色，内部为绿色
        line.set_markerfacecolor('g')
        line.set_markeredgecolor('r')
    8. 给图中的线设置标签(label)
        line1.set_label('sine')
        line2.set_label('cosine')
    9. 在图中打出图例(legend)，观察图例中的名字与线的标签之间的关系
        ax.legend()
    10. 更新其中一条线的颜色，风格等属性，然后更新legend
        line.set_color('m')
        line.set_linestyle('-')
        ax.legend()
    11. 删除图中的线，更新图，更新legend
        line1.remove()      <-- 通过线对象来删除
        ax.lines.clear()    <-- 删全部
        del ax.lines[0]     <-- 删第一条
        plt.draw()          <-- 视情况刷新图像


11. 按要求操练点的操作

    1. 生成横轴纵轴都在0~1之间的200个点
        N = 200
        X = np.random.rand(N)
        Y = np.random.rand(N)
    2. 在图中打出星型的点
        marker='*'
    3. 颜色使用随机颜色，范围是0~1，不透明度的随机范围是0.8~1
        colors = np.random.rand(N,4)
        colors[:,-1] = np.random.uniform(0.8,1,N)
    4. 清空原有的图，设置X,Y轴的数据范围为0~10
        ax.clear()
        ax.set_xlim(0,10)
        ax.set_ylim(0,10)
    5. 打出一个点，坐标(5,5)，大小300，颜色红，边缘颜色绿
        plt.scatter([5],[5], s=300, color='r', edgecolor='g')
    6. 修改点的颜色和边缘的颜色，边缘的风格
        p.set_facecolor('g')
        p.set_edgecolor('g')
        p.set_linestyle(':')


12. 按以下要求操练图例操作

    1. X轴的数据是
        X = np.arange(10)
    2. 预备4条线的Y轴数据
        Y1 = X ** 1
        Y2 = X ** 2
        Y3 = X ** 3
        Y4 = X * 30
    3. 打出四条线，使用不同的外观，三条线指定label，最后一条线不指定
        ax = plt.gca()
        ax.plot(X, Y1, color='r', linestyle='-', marker='o', label='**1')
        ax.plot(X, Y2, color='g', linestyle='--', marker='s', label='**2')
        ax.plot(X, Y3, color='b', linestyle='-.', marker='D', label='**3')
        ax.plot(X, Y4, color='m', linestyle=':', marker='^')
    4. 用简单方式打出legend，观察legend中图例的数量
        ax.legend()
    5. 指定要在legend中输出的文字
        ax.legend(['a', 'b'])
        ax.legend(['a', 'b', 'c'])
        ax.legend(['a', 'b', 'c', 'd'])
    6. 指定线对象和对应的legend文字
        l1, l2, l3, l4 = ax.lines
        ax.legend((l1, l2, l3, l4), ('**1', '**2', '**3', '*4'))
    7. 通过loc参数调整legend在轴中的位置，可以通过ax.legend? 来查看可用的位置参数的值
        ax.legend(loc='upper left')
    8. 测试ncol参数的作用
        ax.legend(ncol=3)
    9. 测试frameon参数的作用
        ax.legend(frameon=False)


13. 操练格子线的属性设置操作

    1. 把所有的横线的颜色设置为绿色，线的宽度设置为2
        xlines = ax.get_xgridlines()
        ylines = ax.get_ygridlines()
    2. 启用小刻度
        ax.minorticks_on()
    3. 把所有小刻度的线的线设置为虚线，颜色为浅灰色，宽度为0.7
        ax.grid(which='minor', linestyle='--', color='grey', linewidth=0.7)


14. 操练刻度及刻度标签的操作

    1. 设置X轴的大刻度为 np.linspace(1, 7, 7)
        ax.set_xticks(np.linspace(1, 7, 7))
    2. 设置X轴的大刻度标签为周一到周日的英文
    3. 设置刻度文本的颜色为绿色，倾斜度是30度
        ax.set_xticklabels(['Monday', 'Tuesday', 'Wednesday',
                            'Thursday', 'Friday', 'Saterday',
                            'Sunday'],
                            color='g', rotation=30)
    4. 尝试对字体做其它调整，调整参数可参考mpl.text.Text 的帮助信息


15. 操练刻度线的操作

    1. 隐藏所有的刻度标签
        ax.set_xticklabels([])
        ax.set_yticklabels([])
    2. 隐藏所有的刻度线（不要把刻度设为空）
        for line in ax.get_xticklines() + ax.get_yticklines():
            line.set_visible(False)
    3. 把X和Y轴的刻度线设置成红色
        for line in ax.get_xticklines() + ax.get_yticklines():
            line.set_color('red')


16. 操练注解的操作

    1. 打出0～10之间的正数的正弦曲线
    2. 给X轴8的位置对应的点加上注解文字
        t = 8
        ty = np.sin(t)
        d = dict(arrowstyle='->', connectionstyle='arc3,rad=-0.3')
        ax.annotate('Peak', xy=(t,ty), xytext=(-70,-30),
                    xycoords='data', textcoords="offset points",
                    arrowprops=d)
    3. 给文字设置字体大小和颜色: fontsize 关键字参数
    4. 尝试把箭头设置成绿色
    5. 使用LaTex公式来做注解文字，公式内容描述如下：
        np.sin(2*np.pi/3) == 3**0.5 / 2

        LaTex 公式代码：

            r'$\sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$'

17. 操练文本输出的操作

    1. 在(5,0) 的位置输出'matplotlib'
    2. 字体大小是16, 字体颜色是蓝色


18. 画出水平线和垂直线

    1. 打出X轴和Y轴的值都在0~1之间的的100个点
        X = np.random.rand(100)
        Y = np.random.rand(100)
        plt.scatter(X, Y)
    2. 在所有点Y轴均值的位置打出一条水平线
        plt.hlines(Y.mean(), X.min(), X.max())
    3. 在所有点X轴均值的位置打出一条垂直线
        plt.vlines(X.mean(), Y.min(), Y.max())


19. 操练填充操作

    1. X轴数据是-np.pi 到 np.pi 之间的256个数
        X = np.linspace(-np.pi, np.pi, 256)
    2. Y轴数据是X轴数据乘以2之后的正弦值
        Y = np.sin(X*2)
    3. 在Y的各个值与Y的均值之间填充绿色，不透明度为0.3
        plt.plot(X, Y, 'g-')
        plt.fill_between(X, Y, Y.mean(), color='g', alpha=0.3)
    4. 删除刚刚填充的颜色区域
        del ax.collections[-1]
        plt.draw()
    5. 在Y的各个值与Y的均值之间填充颜色
        1. 均值上方区域用绿色，不透明度为0.3
        2. 均值下方区域用红色，不透明度为0.3

        plt.fill_between(X, Y, Y.mean(), where=Y>Y.mean(),
                         color='g',alpha=0.3)
        plt.fill_between(X, Y, Y.mean(), where=Y<=Y.mean(),
                         color='r', alpha=0.3)


20. 按要求打出直方图

    1. X 轴的数据是均值为0标准差为1的常态分布
        X = np.random.normal(0,1,300)
    2. 使用默认参数打出直方图
        plt.hist(X)
    3. 指定分组数重新打出直方图
        plt.hist(X, bins=20)
    4. 指定分割点重新打出直方图
        这里使用的分割点是：[-3.5,-2,-1,1,2,3,4]
        plt.hist(X, bins=[-3.5,-2,-1,1,2,3,4])


21. 仿照以下代码打柱型图

    打出北京、上海、广州、深圳四地最近一月的职位图

    jobs = np.array([1000, 800, 500, 950])
    X = np.arange(jobs.size)
    ax.bar(X, jobs)
    ax.set_xticks(X)
    ax.set_xticklabels(['北京','上海', '广州', '深圳'])


22. 仿照以下代码打出饼图
    X = np.array([1000, 850, 500, 950])
    explode = [0.03, 0.01, 0.01, 0.02]
    labels = ['北京','上海', '广州', '深圳']
    colors = ['r','g','b','m']
    ax.pie(X, explode=explode, labels=labels, colors=colors, autopct='%.2f%%')


23. 仿照以下代码打出箱图
    X = np.random.normal(size=100)
    p1 = np.percentile(X, 25)
    p3 = np.percentile(X, 75)
    iqr = p3 - p1
    rng = iqr * 1.5
    upper = p3 + rng
    lower = p1 - rng
    X[0] = lower - 1
    X[1] = upper + 1
    plt.boxplot(X)


1. 在一个坐标系中打出相同数据的正弦和余弦曲线
    1. 弧度范围: -π 到 +π，包括首尾
    2. 使用所有的默认设定


2. 在一个坐标系中打出相同数据的正弦和余弦曲线
    1. 弧度范围: -π 到 +π，包括首尾
    2. 图像大小为8x6英寸，dpi为80
    3. 创建一行一列的坐标系
    4. 正弦曲线的配置：红色，宽1.0，风格为实线
    5. 余弦曲线的配置：蓝色，宽1.0，风格为实线
    6. X轴范围: -4 至 +4
    7. X轴刻度: -4 至 +4，步长为1，共9个刻度
    8. Y轴范围: -1 至 +1
    9. Y轴刻度: -1 至 +1，步长为0.5，共5个刻度
    10. 把最终结果展示出来，并保存到dpi为72的png图片中


3. 承接上题，作出修改
    1. 使图像更宽 (figsize)
    2. 使曲线更粗 (linewidth)
    3. 给线条设置标签 (label)
    4. 使X，Y轴与数据曲线之间留出一些空位 (X.min, X.max)
    5. X轴刻度及标签：-π, -π/2, 0, +π/2, +π (π 的latex表示法: r'$\pi$')
        plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi],
                   [r'$-\pi$', r'$-\pi/2$', r'$0$', r'$+\pi/2$', r'$+\pi$'])
    6. Y轴刻度及标签：-1, 0, +1
    7. 隐藏上边和右边的轴线
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
    8. 把左边和下边的轴线移动到数据空间的(0,0)点
        ax.spines['left'].set_position('zero')
        ax.spines['bottom'].set_position('zero')
    9. 把图例说明打在图像的左上方，不显示边框，使用大字体
        plt.legend(loc='upper left', frameon=False, fontsize='large')
    10. 在两条曲线上打出X值为2π/3的点，颜色与所在的曲线相同
        t = 2*np.pi/3
        plt.scatter([t], [np.sin(t)], 50, 'r')
        plt.scatter([t], [np.cos(t)], 50, 'b')
    11. 在两个点之间画虚线，X轴上段的颜色与上方曲线相同，下段曲线颜色与下方曲线相同
        plt.plot([t,t], [0,np.sin(t)], 'r--')
        plt.plot([t,t], [0,np.cos(t)], 'b--')
    12. 给两个点打出注解文字
        1. 正弦文本的Python代码(Latex)：r'$\sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$'
        2. 正弦文本位于点的右上方 (textcoords="offset points")
        3. 余弦文本的Python代码(Latex)：r'$\cos(\frac{2\pi}{3})=-\frac{1}{2}$'
        4. 余弦文本位于点的左下方 (textcoords="offset points")
        5. 箭头属性：dict(arrowstyle="->", connectionstyle="arc3,rad=.2")
        6. 文本的字体大小为14
        plt.annotate(r'$\sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$',
                     xy=(t,np.sin(t)), xytext=(25,25),
                     xycoords='data', textcoords="offset points",
                     arrowprops=dict(arrowstyle='->', connectionstyle="arc3,rad=.2"),
                     fontsize=14)
        plt.annotate(r'$\cos(\frac{2\pi}{3})=\frac{1}{2}$',
                     xy=(t,np.cos(t)), xytext=(-70,-40),
                     xycoords='data', textcoords="offset points",
                     arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=.2'),
                     fontsize=14)
    13. 设置X和Y轴所有的刻度标签的边界方框的背景为白色，无边框，不透明度为70%，
        字体16，并调整曲线的层次值，以免曲线挡住刻度标签
        for label in ax.get_xticklabels() + ax.get_yticklabels():
            label.set_fontsize(16)
            label.set_bbox(dict(facecolor='white', alpha=0.7, edgecolor='None'))
        for line in ax.lines:
            line.zorder = -1


4. 按要求画一个图

    1. X轴数据是1至50的整数
    2. Y轴数据是X轴的2倍
    3. 设置X轴的标签为 'Time'
    4. 设置Y轴的标签为 'Amount'
    5. 设置坐标系的标签为 'Time and Amount'


5. 按要求画一个图
    1. X轴数据是 np.arange(10)
    2. Y轴数据是 np.random.randint(0,5,10)
    3. 给X轴，Y轴，坐标系设置适当的标签


6. 从https://finance.yahoo.com/ 获取AAPL 最近一年的历史数据

    1. 在一个图纸中用四条线输出Open,High,Low,Close的数据
    2. 给每条线设定适当的标签
    3. 四条线的颜色分别是：红、蓝、绿、黑
    4. 四条线的宽度分别是：1, 2, 3, 4
    5. 四条线的风格分别是：实线、虚线、点划线、点线
    6. 打出图例
    7. 设置X轴的标签为 'Day'
    8. 设置Y轴的标签为 'Price'
    9. 设置坐标系的标签为 'AAPL price'


7. 按要求画图

    1. 画一条 -π 到 +π 之间的20个数的正弦曲线
    2. 线条为绿色实线，标记是圆点，宽度为1.5

8. 按要求画图

    1. 画出一个矩形，左右两边线条为绿色，上下两边为蓝色
    2. 矩形的四个角画出明显的四个圆点，圆点的颜色为红色

9. 按要求画图

    1. 打出X和Y值在 0 ~ 1 之间的300个随机点的散点图
    2. 设置X和Y轴的限制在 -0.1 和1.1 之间
    3. 点的颜色随机变化，不透明度在0.7到1之间随机变化

10. 按要求画图

    1. X轴的值是 1 ~ 10 的整数
    2. 在一个坐标系中画出三条线，Y轴的值分别是X轴的1次方，2次方，3次方
    3. 三条线使用不同的风格和颜色

11. 按要求画图
    1. 画出GOOG股票最近一月的收盘价的曲线图
    2. 打出X轴和Y轴的格子，格子线条设置：实线、灰色、宽度0.5, 不透明度0.7

12. 按要求画图
    1. 画出GOOG股票最近一月的收盘价的曲线图
    2. 显示小刻度
    3. 打出X轴和Y轴的格子
        大刻度的格子：格子线条设置：实线、蓝色、宽度0.8, 不透明度0.7
        小刻度的格子：格子线条设置：虚线、灰色、宽度0.5, 不透明度0.7

13. 按要求画图

    1. 在图中划分4个坐标系
    2. 所有坐标系分两行显示
    3. 第一行一个坐标系，水平方向占满整图
    4. 第二行三个坐标系，水平方向平均占满整图


14. 按以下要求制作一个雨点动画
    1. 去除工具栏
        mpl.rcParams['toolbar'] = 'None'
    2. 雨点的位置采用均匀分布的随机数
        n = 50
        P = np.random.uniform(0,1,(n,2))
    3. 雨点的边缘初始颜色为黑色，随着扩大颜色逐渐变淡
        C = np.zeros((n,4))
        C[:,-1] = np.linspace(1,0,n)
    4. 雨点没有背景色
        minsize = 50
        maxsize = 50*50
        S = np.linspace(minsize, maxsize, n)
        points = plt.scatter(P[:,0], P[:,1], S, color='None', edgecolor=C)
    5. 图像的横轴和纵轴比例不变
        plt.axes([0.025, 0.025, 0.95, 0.95], aspect=1)
    6. 图像使用紧凑的布局
        plt.axes([0.025, 0.025, 0.95, 0.95], aspect=1)
    7. 隐藏所有的轴线，刻度，固定X轴和Y轴的长度
        plt.xticks([])
        plt.yticks([])
        [s.set_visible(False) for s in ax.spines.values()]
        ax.set_xlim(0,1)
        ax.set_ylim(0,1)
    8. 把结果输出成一个gif图片
        def updater(frame, args):
            P = args['P']
            S = args['S']
            C = args['C']
            minsize = args['minsize']
            maxsize = args['maxsize']
            n = args['n']
            points = args['points']

            S += (maxsize - minsize) / n
            delta = 0.02
            C[:,-1] = np.maximum(0, C[:,-1] - delta)

            i = frame % n
            P[i] = np.random.uniform(0,1,2)
            S[i] = minsize
            C[i,-1] = 1

            points.set_offsets(P)
            points.set_sizes(S)
            points.set_edgecolors(C)

            return points

        fargs = dict(P=P, S=S, C=C, minsize=minsize, maxsize=maxsize, n=n, points=points)
        animation = FuncAnimation(fig, updater, interval=10, frames=50, fargs=(fargs,))
        animation.save('/tmp/ani.gif', writer='imagemagick', fps=30, dpi=72)


15. 按以下要求制作一个全地地震动画
    1. 去除工具栏
        matplotlib.rcParams['toolbar'] = 'None'
    2. 利用basemap库打出世界地图
        from mpl_toolkits.basemap import Basemap
        map = Basemap(projection='mill')
        map.drawcoastlines(color='0.50', linewidth=0.25)
        map.fillcontinents(color='0.95')
    3. 地图中同时显示50个点
    4. 点扩大的速度与震级成正比
    5. 遍历所有的地震数据，每次取出一个数据用于更新图中的点
    6. 每次更新图中一个点
    7. 震级大于6级时，点的背景和边缘用红色，否则用蓝色
        蓝色：0,0,1,1
        红色：1,0,0,1
    8. 点的背景颜色比其边缘颜色略浅
        scat.set_edgecolors(P['color'])
        scat.set_facecolors(P['color']*(1,1,1,0.25))

    地震数据来源：http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/4.5_month.csv


16. 按以下要求制作图形
    1. 样本是 -π 到 +π 之间的256个数
    2. 样本的值放大两倍后求正弦值
    3. 在同一个坐标系中打出两条正弦曲线，一上一下，拉开距离
    4. 在上方曲线与其Y轴均值之间填充颜色，使用蓝色，不透明度0.25
    5. 在下方曲线与其Y轴均值之间填充颜色，上方两段波形使用蓝色，下方两段波形使用红色，不透明度都是0.25
    6. 隐藏刻度
        plt.xticks([])
        plt.yticks([])
    7. 固定X轴和Y轴的比例为1:1
        plt.gca().set_aspect(1)


17. 按以下要求制作柱型图
    1. 样本X轴的范围是0至9
        X = np.arange(10)
    2. Y轴是0.1至1的趋势递增的随机正数
        Y1 = np.linspace(0.1,1,X.size) * np.random.uniform(0.7,1,X.size)
    3. 打出第二个柱型图，Y轴是-0.1至-1的趋势递减的随机负数
        Y2 = np.linspace(-0.1,-1,X.size) * np.random.uniform(0.7,1,X.size)
    4. 第一个柱型图柱体用蓝色，第二个柱型图柱体用绿色，两个柱型图之间应有视觉上的分界线
        plt.bar(X, Y1, color='b', edgecolor='w', linewidth=1)
        plt.bar(X, Y2, color='g', edgecolor='w', linewidth=1)
    5. 为第一个柱型图柱体的上方用文本标注Y轴的值，文本与柱体之间应有适当的间隔
    6. 为第二个柱型图柱体的下方用文本标注Y轴的值，文本与柱体之间应有适当的间隔
        for x,y1,y2 in zip(X,Y1,Y2):
            plt.text(x,y1+0.05,'%.2f'%y1, fontsize=14, ha='center', va='center')
            plt.text(x,y2-0.05,'%.2f'%y2, fontsize=14, ha='center', va='center')
    7. 设置适当的坐标轴数据范围，使得两个柱型图能够大体居中显示
    8. 隐藏所有的刻度


18. 按以下要求制作等高图形
    1. 样本的X轴是-3至3范围内的100个值，Y轴也一样
    2. 高度参数Z的值是X与Y的平方和的平方根
    3. 在一张图中打出三个图形
        第一个图形：
            1. 绘制等高线，线条颜色为黑色、风格为虚线、宽度为0.5
            2. 给等高线制作标签，标签文本需完全覆盖下面的线条
        第二个图形：
            2. 绘制等高线，自动选择4个高度，颜色红，实线，宽度1
            3. 给等高线制作标签，标签文本需完全覆盖下面的线条，文本中保留小数点后两位
        第三个图形：
            2. 绘制等高线，指定4个高度，指定4个颜色，点划线，宽度1
            3. 给等高线制作标签，标签文本需完全覆盖下面的线条，文本中保留小数点后两位


19. 按以下要求制作等高图形
    1. 样本与高度参数Z同上题
    2. 在一张图中打出三个图形
        第一个图形：
            1. 绘制等高填充图形，自动选择4个高度，指定颜色为 [红，黄，蓝，绿]
            2. 给等高填充区域制作颜色示意图
        第二个图形：
            1. 绘制等高填充图形，使用mpl.cm.hot作为cmap，不透明度0.7
            2. 给等高填充区域制作颜色示意图
        第三个图形：
            1. 绘制等高线，颜色白，线宽1，实线，制作等高线标签，标签文字白色
            2. 绘制等高填充区域，使用mpl.cm.hot，不透明度0.7，制作颜色示意图


20. 按以下要求制作饼图
    1. 样本数据是元素值全为一的长度为N的一维阵列
    2. 扩展度是0.06，其中最后一个扩展度应较其它元素明显
    3. 设置一系列颜色供扇型使用
    4. 为每个扇型设置标签
    5. 设置图的背景色为深灰色 (#999999)
    6. 固定坐标轴的XY比值为1
    7. 显示每个扇型所占的百分比，数值保留两位小数
    8. 扇型边沿线条颜色设置为白色，线条为虚线
    9. 字体颜色为白色，大小为10

    ax.pie(X, explode=explode*3, colors=colors, labels=labels, autopct='%.2f%%',
           wedgeprops=dict(edgecolor='w', linestyle='--'),
           textprops=dict(color='w', fontsize=10))
