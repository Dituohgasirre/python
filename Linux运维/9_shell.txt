Bash Shell编程

Shell所有的东西全都是命令, 都具备命令的操作方法
    命令有标准输出/标准输入, 都可以使用输入输出重定向

变量
    定义
        变量名=变量值
            变量命名规则与Python一样
            =两边不能有空格(空格为bash命令参数分隔符)
            变量值(一切皆于字符串)

    赋值
        变量名=变量值

    访问
        $变量名
        ${变量名}

    删除
        unset 变量名

    环境变量与普通变量的区别:
        环境变量使用export定义与赋值
        环境变量会影响子进程
        普通变量可以使用export变成环境变量

操作符(变量操作)
    访问        $变量名

    赋值
        变量名=变量值
        变量名=${其它变量名-默认值}
            其它变量不存在赋默认值， 存在赋其它变量的值


    数学运算(+ - * / %...)
        echo $[变量名 + 4]
        echo $((变量名 * 6))
        let 变量名++
        ...

    字符串操作
        连接        直接连接
        长度
            ${#变量名}
        索引
            ${变量名:索引值}

        分片
            ${变量名:索引值:数值}

        截取
            ${变量名#*分隔符}
                取第一个分隔符右边的内容
            ${变量名##*分隔符}
                取最后一个分隔符右边的内容
            ${变量名%分隔符*}
                取最后一个分隔符左边的内容
            ${变量名%%分隔符*}
                取第一个分隔符左边的内容

        删除
            ${变量名#字符串}
                删除变量值最左边指定的字符串
            ${变量名%字符串}
                删除变量值最右边指定的字符串

        替换
            ${变量名/原字符串/新字符串}
                替换第一个字符串
            ${变量名//原字符串/新字符串}
                替换全部匹配的字符串

        转换大小写
            ${变量名^}
                首字母大写

            ${变量名^^}
                所有字母大写


    练习:
        截取本机正在使用的IP地址
            export LANG=en_US.UTF-8
            export LANGUAGE=en_US:en_US:en
            ip=$(ifconfig enp2s0)
            ip=${ip#*inet addr:}
            echo ${ip%% Bcast:*}

    内置变量
        $$          当前进程的PID
        $#          当前运行程序的参数个数
        $*          代表当前脚本所有参数
        $@          代表当前脚本所有参数
        $0          代表当前脚本名
        $1 ... $n   代表当前脚本的第几个参数
        $?          输出上一条命令的返回值(0代表正确, 非0代表错误, 取值范围: 0-255)

-------------------------------------------------------------------------------
输入输出
    输出
        echo
            echo -e     解析特殊字符意义
            echo -n     不自动换行
        printf
            printf "%d %x %s %10d %10.2f" 10 30 "hello" 20 34.56778

    输入
        read
            获取用户输入，将用户输入使用环境变量REPLY来保存

        read input
            将用户输入保存在input变量中

        read n1 n2 n3
            默认以空格为分隔符分别给n1 n2 n3赋值

        read
            -p      指定输入提示符
            -d      指定输入结束符
            -n      指定输入字符最多个数
            -s      关闭回显获取输入
            -t      指定输入的时间

        IFS变量控制输入分隔符(默认分隔符为空格)
            IFS=":" read a b c
                此次获取输入以冒号分隔符, 只影响此次获取

        临时给命令传递环境变量
            变量名1=变量值1 变量2=变量值2 命令 参数
                此时的变量只是在此次命令运行时生效

-------------------------------------------------------------------------------
语法格式
    将多条命令合并一行执行
        ;           代表前面命令结束
        &           代表前面命令后台运行, 开启新进程运行
        &&          前面命令执行成功才会执行后面命令
        ||          前面命令执行失败才会执行后面命令

            if ping 3.3.3.3 -c 1 &> /dev/null ; then
                echo "3.3.3.3" >> /tmp/ip.list
            fi

            可以简化为:
                ping 3.3.3.3 -c 1 &> /dev/null && echo "3.3.3.3" >> /tmp/ip.list

            if test $num -ge 30 ; then
                echo "hello"
            else
                echo "world"
            fi

            简化:

            (test $num -ge 30 && echo "hello") || echo "world"
             test $num -ge 30 && ls hello || echo "world"
                条件满足执行ls, 但ls执行失败也会执行echo "world"

    一行执行多条命令(命令组)
        (命令1; 命令2...)           开新进程运行
        { 命令1; 命令2;... }        在本进程中运行
        source 命令                 在本进程中运行
        . 命令                      简化source书写

    一条命令分多行书写
        ./configure --enable-gui --disable-speak         \
                    --prefix=/usr/local/lib --enable-xml \
                    --disable-fork

-------------------------------------------------------------------------------
流程控制
    分支
        if
            if 命令1 ; then
                命令结果为真执行的内容
            elif 命令2
            then
                命令2结果为真执行的内容
            ...
            else
                以上命令结果为假执行的内容
            fi

            条件表达式命令: [ ] 和 test
                [ $n -ge 10 ]
                test $n -ge 10

                man test
                    查看test和中括号支持的表达式

                数字比较运算符
                    -gt     大于
                    -ge     大于等于
                    -lt     小于
                    -le     小于等于
                    -eq     相等
                    -ne     不相等

                字符串比较运算符
                    =       两个字符串是否相等
                    !=      两个字符串是否不等

                文件判断
                    -e file     判断文件是否存在
                    -d file     判断文件是否为目录
                    -f file     判断文件是否为普通文件
                    -p file     判断文件是否为管道文件
                    -b file     判断文件是否为块设备文件
                    -c file     判断文件是否为字符设备文件


        case        多路匹配
            case 变量名 in
                1)
                    变量的值为1要执行代码
                    ;;
                2)
                    变量的值为2要执行代码
                    ;;
                3)
                    变量的值为3要执行代码
                    ;;
                *)
                    变量的值不为123要执行代码
                    ;;
            esac

    循环
        while
            while 命令 ; do
                循环体
            done

            命令结果为值才会循环

        until
            until 命令 ; do
                循环体
            done

            命令结果为假才会循环

        for
            for i in 1 2 3 4 5 6 7 ; do
                echo $i
            done

        循环控制语句
            break       退出循环
            continue    跳过本次循环
            sleep       延时
            exit        退出脚本

        while IFS=":" read name x uid gid m ; do
            echo ">>> $name $uid $gid"
        done < /etc/passwd > /tmp/index.html

        将/etc/passwd文件所有用户名、UID和GID单个获取操作再输出重定向

-------------------------------------------------------------------------------
函数
    定义
        [function] 函数名() {
            函数体代码
        }

    调用
        函数名 参数列表...

    参数
        以下符号在函数内部访问的意义
            $1 - $n     代表函数具体第几个参数
            $@          代表函数所有参数
            $*          代表函数所有参数

            $@和$*的区别在于加双引号, $@还会展开参数, $*不会展开

    返回值
        使用return进行返回, 只能返回0-255, 标识函数的错误码, 0代表正确
        访问函数返回值是通过$?来取
        shell的返回值只是标识函数是否出错

    变量作用域
        shell默认情况的变量都为全局变量
        当需要局部变量时使用local声明

-------------------------------------------------------------------------------
数组
    shell的数组不能嵌套

    定义
        数组名=(值1 值2 值3...)

        declare -a 数组名
            定义索引数组

        declare -A 数组名
            定义key/value数组

    访问
        ${a[0]}     访问数组第一个元素

    赋值
        a[0]=30

    删除
        unset a[0]
        unset a

-------------------------------------------------------------------------------
计算程序运行时间
    time 命令
        查看real时间 代表命令运行时间

逐行读取文件
    while read line ; do
        echo $line
    done < /etc/passwd

临时文件
    mktemp
        创建临时文件并且输出路径

    file=$(mktemp)
    echo "hello" > $file
    rm $file -f

大批量写文件
    cat > 文件路径 << EOF
        ....
EOF

进程替换
    进程替换运行子命令并且将子命令的标准输入或输出重定向到文件
    进程替换可以给脚本提高运行效率(减少临时文件存在)
    <(command stdout)       读  标准输入
    >(command stdin)        写  标准输出

find_mp3_randNum() {
    for path in $(find /music/ -name "*.mp3")
    do
        echo ${RANDOM}_$path
    done
}

clear_randNum() {
    while read line ; do
        echo ${line#*_}
    done
}

#find_mp3_randNum | sort -n | clear_randNum > /tmp/mul.list
#mplayer -playlist  /tmp/mul.list

mplayer -playlist <(find_mp3_randNum | sort -n | clear_randNum)


文件描述符操作(提高脚本运行效率, 减少文件打开关闭操)
    打开文件描述符
        exec 3>file     以只写的形式打开文件描述符
        exec 3<file     以只读的形式打开文件描述符
        exec 3>>file    以追加的形式打开文件描述符
        exec 3<>file    以读写形式打开文件描述符

    关闭文件描述符
        exec 3>&-

    操作文件描述符
        写
            cmd 2>&3        将命令的错误输出重定向到指定文件描述符
            cmd 1>&3        将命令的标准输出重定向到指定文件描述符(默认)

        读
            cmd <&3

-------------------------------------------------------------------------------
正则表达式(文本处理 - 不确定情况)
    描述字符串结构的语法规则, 用于匹配 替换 截取匹配字符串
    正则表达式的概念最初由Unix的工具(ed/grep/sed)普及
    贝尔实验室推出egrep命令扩展正则表达式的能力

    POSIX标准规范正则表达式为普通
    perl标准规范 基于POSIX标准

    元字符
        行定位符 ^$
            ^       行首
            $       行尾

        点字符
            任意一个字符

        字符类  []
            []      一个中括号代表一个字符, 匹配中括号里指定的字符
                连字符      -
                排除字符    ^       在中括号里的字符取非

                例:
                    [abc]       匹配一个字符是a或b或c
                    [^abc]      匹配一个字符不a或b或c的任意字符
                    [0-9]       匹配一个字符是0到9任意一个数字
                    [a-zA-Z]    匹配一个字符必须是字母

                预定义字符类
                    [[:digit:]]     十进制数字 [0-9]
                    [[:alnum:]]     字母和数字组合 [0-9a-zA-Z]
                    [[:alpha:]]     字母[a-zA-Z]
                    [[:blank:]]     空格和制表符
                    [[:space:]]     空白字符(空格 换行符 换页符 回车符 制表符)
                    [[:lower:]]     小写字母
                    [[:upper:]]     大写字母
                    [[:punct:]]     特殊符号的匹配
                    ...

        选择字符(扩展正则) |
            代表或的意思, 放在两个字符之间, 与[]不同的是|可以匹配任意长度

            a|b             匹配a或b
            cat|dog         匹配cat或dog


        限定符(量词 重复序列) ? + * {n,m}
            *           匹配前面字符重复0次到n次
            ?           匹配前面字符重复0次到1次(扩展正则)
            +           匹配前面字符重复1次到n次(扩展正则)
            {n}         匹配前面字符重复n次
            {n,}        匹配前面字符重复至少n次
            {n,m}       匹配前面字符重复n次到m次

            量词匹配是典型贪婪
                例: <.*>    匹配<开头到最后一个>的字符串

                如果需要最少匹配
                    perl标准，在量词后加一个问号
                        例: <.*?>   匹配<开头到第一个>的字符串

                    另一种解决方法: <[^>]*>

        转义符  \   将后面字符脱义
            \*      匹配字符串中*字符

            特殊的转义:
                \a      警报 ASCII字符集中BEL或0x07
                \b      退格 ASCII字符集中0x08(只能在中括号中使用)
                \n      换行 LF或0x0A
                \r      回车 CR或0x0D
                \t      水平制表符 HT或0x09
                \v      垂直制表符 VT或0x11
                \e      ESCAPE ESC或0x1B
                \f      换页符 FF或0x0C
                \xhh    十六进制代码
                    \x0C
                \ddd    八进制代码
                    \033

                \d      任意一个十进制的数字 [0-9]
                \D      任意一个非十进制的数字 [^0-9]
                \s      任意一个空白字符 [ \f\n\r\t]
                \S      任意一个非空白字符 [^ \f\n\r\t]
                \w      任意一个单词字符 [a-zA-Z0-9_]
                \W      任意一个非单词字符 [^a-zA-Z0-9_]

            单词匹配符
                \<      单词开头
                    \<good      匹配good开头的单词
                \>      单词结尾
                    end\>       匹配end结尾的单词

                匹配good单词    \<good\>

        子表达式  ()
            1. 限定作用范围
                例: (thir|four)th
                    匹配thirth和fourth两个单词, 没有小括号代表匹配thir和fourth两个单词

            2. 分组(子表达式|子模式)
                例: ([a-zA-Z]+[0-9])+
                    匹配一个或多个的(多个字母加一个数字)的字符串

                分组命名
                    默认没有命名引用使用\1 \2...来引用
                    (?P=<kyo>[a-zA-Z]+)[0-9]+
                    引用命名: (?P=kyo)

    模式修饰符
        i           忽略大小写
        m           多文本模式(跨行)
        s           单文本模式(默认)
        x           忽略空白和注释

        后缀使用方法
            /[a-z]/i

        内联使用方法
            (?i:[a-z]+)

        混合使用方法
            /(?-i:[a-z]+)root/i
                整体忽略大小写匹配，子表达式除外

    前向和后向断言
    一次性子模式(剪切)
    条件表达式
    注释

-------------------------------------------------------------------------------
sed     流编辑器(正则表达式)
    可以对标准输入中的数据流进行各种编辑操作(删除 替换 添加 输出)

    -e      后面sed表达式, 一个-e指定一个表达式, 如果一个表达可以不加-e
    -n      关闭sed默认输出
    -r      开启扩展正则表达式
    -i      将修改影响源文件

    删除    d
        删除第一行输出
            sed -e '1d' passwd

        删除第一行和第三行输出
            sed -e '1d' -e '3d' passwd
                或
            sed -e '1d;3d' passwd

        删除最后一行
            sed '$d' passwd

        删除第一行到第五行输出
            sed '1,5d' passwd

        删除第一行到第五行和第八行输出
            sed '1,5d;8d' passwd

        删除有root单词的行输出
            sed '/\<root\>/d' passwd

    打印    p
        打印第一行
            sed -n '1p' passwd

        打印第二行和第五行
            sed -n '2p;5p' passwd

        打印以root开头行
            sed -n '/^root/p' passwd

        打印以小写字母开头和以nologin结尾行
            sed -n '/^[a-z]/p;/nologin$/p' passwd

        打印以rot开头到nologin结尾的行
            sed -n '/^rot/,/nologin$/p' passwd

    替换    s
        把每行的第一个root替换成kyo
            sed 's/root/kyo/' passwd

        把每行的第二个root替换成kyo
            sed 's/root/kyo/2' passwd

        把全部root替换成kyo
            sed 's/root/kyo/g' passwd

        指定第2行到第10行替换root为kyo
            sed '2,10s/root/kyo/g' passwd

        把root替换成rootboot
            sed 's/root/&boot/' passwd

        把rot开头到nologin结尾的行替换root为kyo
            sed '/^rot/,/nologin$/s/root/kyo/g' passwd

        支持扩展正则表达式
            sed -r -n 's/ro+t/kyo/p' passwd

        将改动写回文件
            sed -i -r 's/ro+t/kyo/' passwd

    子表达式应用(位域)
        删除每行的第一个字符
            sed -n -r 's/^.//p' passwd
                或
            sed -n -r 's/^.(.*)$/\1/p' passwd

-------------------------------------------------------------------------------
练习:
    使用sed截取IP地址, 其输出格式为: 192.168.7.155/255.255.254.0
        sed -r -n 's/^[^:]*:(([0-9]{1,3}\.){3}[0-9]{1,3}).*:(.*)$/\1\/\3/p' < <(LANGUAGE=en_US:en_US:en ifconfig)
        IP地址: 0-255
            [1-9][0-9]?     1-99
            1[0-9]{2}       100-199
            2[0-4][0-9]     200-249
            25[0-5]         250-255

        (([1-9][0-9]?)|(1[0-9]{2})|(2[0-4][0-9])|(25[0-4]))\.
        ((0|([1-9][0-9]?)|(1[0-9]{2})|(2[0-4][0-9])|(25[0-4]))\.){2}
        (([1-9][0-9]?)|(1[0-9]{2})|(2[0-4][0-9])|(25[0-4]))

    删除每行第二个单词([^a-zA-Z])
        sed -r -n 's/^([^a-zA-Z]*[a-zA-Z]+[^a-zA-Z]+)[a-zA-Z]+(.*)$/\1\2/p' passwd

        简化为:
            sed -r -n 's/[a-zA-Z]+//2p' passwd

    交换每行的第二个单词和倒数第二个单词
        sed -r -n 's/^([^a-zA-Z]*[a-zA-Z]+[^a-zA-Z]+)([a-zA-Z]+)(.*[^a-zA-Z]+)([a-zA-Z]+)([^a-zA-Z]+[a-zA-Z]+[^a-zA-Z]*)$/\1\4\3\2\5/p' passwd

    验证电子邮箱

    验证中国手机号码

    验证身份证号

-------------------------------------------------------------------------------
作业:
    猜数字游戏
        随机数
            RANDOM环境变量
            100以内的随机数: $[RANDOM % 100]

    验证指定用户名是否在本系统上存在

    检测本网段所有IP是否能连通, 将能连通的IP存储在/tmp/ip.list文件
        for ip in $(seq 1 254) ; do
            ping -c 1 3.3.3.$ip &> /dev/null && echo "3.3.3.$ip"
        done > /tmp/ip.list

    找出/etc/下所有以.conf结尾的文件, 拷贝到/tmp/conf目录下，将.conf后缀改为.html
        test -e /tmp/conf || mkdir /tmp/conf
        test -d /tmp/conf || exit 0

        for file in find /etc -name "*.conf" ; do
            dst=$(basename $file)
            cp $file /tmp/conf/${dst%.conf*}.html -rf
        done

    找出/usr/share/doc/目录下所有的index.html文件, 拷贝到/tmp/index目录下并将文件名按查找顺序更改名字
        第一个为index.html.1, 第二个为index.html.2 以此类推

        i=1
        for file in $(find /usr/share/doc -name "index.html") ; do
            cp $file /tmp/index/index.html.$i
            let i++
        done

    实现随机播放列表功能
        mplayer -playlist <                                 \
            <(while read line ; do echo ${line#*_} ; done < \
                <(for file in $(find /etc/ -name "*.mp3") ; \
                    do echo ${RANDOM}_$file ; done | sort))

    实现检测ssh登录并且踢下线

    封装nc命令使点对点传输文件更简单
        发送: ns file/dir
        接受: ns 155 /tmp/

    网络检测及网络自动修复脚本
        获取网卡设备名      ifconfig | awk | egrep
        确定网卡是否启动    ifup
        查看网卡有否连通    mii-tool
        截取IP地址          ifconfig | sed
        查看路由表获取网关  route -n | awk
        ping网关
        ping DNS服务器IP
        ping 域名

    完善同步教师机数据脚本(异常处理)

    处理以下文件内容, 按域名取出并进行读数排序, 如处理:
        http://www.baidu.com/index.html
        http://www.baidu.com/1.html
        http://post.baidu.com/index.html
        http://mp3.baidu.com/index.html
        http://www.baidu.com/3.html
        http://post.baidu.com/2.html

        输出结果:
            3 www.baidu.com
            2 post.baidu.com
            1 mp3.baidu.com

    给当前目录下所有文件名增加唯一前缀字符
        a-zA-Z0-9

