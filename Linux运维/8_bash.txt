进程管理
    进程 -> 正在运行的程序
    为了操作系统管理进程,每个进程都会分配一个唯一标识符(进程描述符 PID)
    进程描述符(取值范围:1 - 65535) -> 系统资源之一

    查看
        所有进程信息以文件形式存储在/proc/目录

        列表所有进程
            ps -aux

        实时查看进程状态(任务管理器)
            top

        查看进程树
            pstree

    进程组
        只要运行程序, 此程序不管有没有再创建进程, 此程序为进程组
        包含一个或多个进程, 进程组长的PID即是进程组的唯一标识符
            杀死一个进程
                kill -9 1024

            杀死一个进程组
                kill -9 -1024

    会话
        包含一个或多个进程组
        一个会话对应一个控制终端(输入输出设备)
        使用控制终端的进程组为前台进程组
        其它没有使用控制终端的进程组为后台进程组

        作业管理
            jobs        查看当前终端所有后台进程组
            ctrl + z    将当前进程组切换到后台进程组
            fg          将后台进程组切换前台进程组

    守护进程
        没有控制终端, 服务进程, ps或top信息中控制设备显示?的进程为守护进程

    进程状态
        S       睡眠状态, 有可能会其它程序唤醒
        R       正在运行状态
        D       不可中断睡眠状态, 等待硬件来唤醒
        Z       僵尸进程(父进程未结束, 子进程先结束, 子进程为僵尸进程)
        T       进程暂停状态

    进程优化级
        给程序设置运行优先级, 数值越高, 优先级越低(-20到19)
            nice -19 ./test.sh

        renice与nice一样, 修改正在运行程序的优先级


    给进程发信号(结束 暂停 通知)
        让某个进程(2009)结束
            kill -9 2009

        让某个进程组(2009)结束
            kill -9 -2009

        给所有进程发信号
            kill -9 -1

        查看信号源: kill -l

        通过进程名来控制进程(用法与kill一样)
            killall -9 vim

-------------------------------------------------------------------------------
Bash特性
    Shell       人机交互程序(文本/图形)

    文本Shell:
        ash zsh bash...

    ubuntu默认使用是bash

    快捷键
        emacs(默认)
            ctrl + a    跳到行首
            ctrl + e    跳到行尾
            ctrl + s    关闭回显
            ctrl + q    打开回显
            ctrl + c    给前台进程组发送中断信号(-2)
            ctrl + d    终止输入
            ctrl + l    清屏
            ...

        vi
            #切换快捷模式使用vi模式 (临时生效)
            set -o vi
            #vi模式下支持ctrl + l
            bind -m vi-insert c-l:clear-screen
            bind -m vi-command c-l:clear-screen

            支持vi基本操作(普通模式 按ESC)
                移动
                    w/b/e/f/h/l/0/$/I/A
                删除
                    dd D dw db
                命令历史切换
                    j/k
                命令历史搜索(普通模式)
                    /搜索关键词
                        搜索结果使用j/k上下选择
                使用vim编辑命令
                    普通模式按v

    命令历史
        列出当前终端所有命令历史
            history

        列出最后10条命令历史
            history 10

        保存历史
            history -w /tmp/a.history

        加载历史
            history -r /tmp/a.history

        删除历史
            删除所有历史
                history -c

            删除指定历史
                history -d 3568

        命令历史相关环境变量
            HISTFILE        指定命令历史默认保存文件
            HISTFILESIZE    指定命令历史默认文件保存多少条记录
            HISTSIZE        指定命令历史条目数
            HISTTIMEFORMAT  指定命令历史显示格式
                export HISTTIMEFORMAT="%F %T "

        重复执行命令历史
            !!          执行最后条件命令历史
            !100        执行第100条命令历史
            !ls         执行最后匹配ls开头的命令历史
            !$          获取最后一条命令历史的第一个参数
                vim /usr/local/include/uv.h
                cp !$ /tmp/
                    !$替换上一条命令的第一个参数

    命令别名
        列出当前终端所有命令别名
            alias

        增加命令别名
            格式: alias 命令别名名="执行的命令"

            alias m='sudo mount 3.3.3.3:/kyo /mnt'
            alias ptmux='tmux new -s python -n "文档" \; new-window -n "编辑" \; new-window -n 测试'

        删除命令别名
            unalias m

        命令别名只能在当前终端生效, 想要永久生效将命令别名写入~/.bashrc

    环境变量
        环境变量存储系统环境相关的数据
        环境变量是给程序传递参数的一种手段
        子进程会复制父进程的环境变量

        bash提供环境变量为了提供程序运行效率

        列出当前终端所有环境变量
            env

            HOME            当前登录用户的家目录路径
            LS_COLORS       扩展ls对文件后缀不同颜色不同
            PS1             控制命令行提示符
            OLDPWD          保存上一次所在路径
            USER            当前登录用户
            PATH            保存所有命令所在路径
            LANGUAGE        当前终端的语言环境

        定义环境变量 (临时, 只能在当前终端生效)
            export 环境变量名=环境变量值

        访问环境变量
            echo $环境变量名

        删除环境变量
            unset 环境变量名

    配置文件
        ~/.bashrc           bash启动时执行此脚本配置文件
        ~/.profile          当用户登录时执行此脚本配置文件(开启新会话)
        ~/.bash_history     命令历史保存文件

    脚本(将多条命令集中在一起按从上到下的顺序执行)
        入口
            告诉shell程序用什么程序去解析本脚本
                #!/bin/bash

            创建文件从上到下写命令
            一行为一条命令

            脚本运行开启新进程运行, 在新进程中执行cd或环境变量创建不会影响父进程

            使用source或.内部去执行脚本(用本进程去执行脚本)


        注释
            #开头为注释

    作业:
        同步教师机数据
        检测网络
        开发环境搭建
        实现将ssh远程登录用户踢下线


    特殊符号(bash)
        *           通配符
        $           访问shell变量的值
        \           脱义符/转义符, 将单个特殊符号的作用去除
        ""          不完全的批量转义符, 不会转义$等特殊符号
        ''          完全的批量转义符
        ``          执行shell命令并且将标准输出替换位置, 不推荐使用
        $()         同上
        {}          匹配范围
                {1..10}
                {1..10..2}
                {1,3,7,11}
        !           执行命令历史
        #           注释
        > >> 1> 2> &>   输出重定向
        < << <<<        输入重定向
        |           管道
        &           后台运行
        ;           一条命令的结束符
        :           永真, 一般与while组合使用
        %           将最后一个后台进程组调到前台
        /           根
        ~           用户家目录
        -           上一次所在目录/选项
        .           使用当前进程去执行程序
        []          配合使用 条件表达式/运算表达式

        参考地址:
            https://linux.cn/article-5657-1.html

