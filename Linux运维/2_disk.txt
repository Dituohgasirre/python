磁盘管理

分区方案:
    MBR
        开机BIOS程序(设置以硬盘启动) 会自动读取硬盘第一块(0扇区 512字节)数据到内存
        0扇区(512字节):
            前面64个字节为分区表信息
                一个分区的信息占16个字节, 一个硬盘最多分4个分区, 这个分区为称主分区
                扩展分区占一个主分区位, 扩展分区只是标识扩展使用，不能直接存储
                在扩展分区可以继续划分逻辑分区, 逻辑分区不能无限

            后面字节为启动程序代码

    GPT
        MBR升级方案, UEFI程序来解析GPT, 理论值无限分区, 没有主分区 扩展分区
        逻辑分区的概念

磁盘分区设计:
    数据分区(普通文件)
        二进制文件
            音视频文件
            图片
            其它数据(软件安装 缓存)
        文本文件

    系统根分区

    交换分区(当内存不够用时才会使用 缓存 Linux 文件化)

    个人MBR分区方案:
        第一个主分区      50G     Windows C盘
        第二个主分区      50G     扩展使用(黑苹果 根据实际情况可以不要)
        第三个主分区作为扩展分区(剩余所有空间)
        第一个逻辑分区    4G    　交换分区
        第二个逻辑分区  　30G     主Linux根分区
        第三个逻辑分区  　30G     次Linux根分区
        第四个逻辑分区  　20G     测试Linux根分区(根据实际情况也可以不要)
        第五个逻辑分区  　50G     Linux的数据分区
        第六个逻辑分区  　剩余空间　Windows D盘
        ...

    个人GPT分区方案:
        第一个分区      4G      ESP分区
        第二个分区      1M      BIOS分区(兼容)
        第三个分区      50G     Windows C盘
        第四个分区      100G    Linux LVM
        ...

Linux磁盘命名规划
    /dev/sda
         s      代表SATA硬盘/移动设备
         d      代表硬盘
         a      代表本机第一块SATA硬盘

    /dev/sdd    代表本机第四块SATA硬盘

    /dev/hda    代表本机第一块IDE硬盘

    /dev/sda1   代表本机第一块SATA硬盘的第一个分区


磁盘管理命令
    备份分区表
        head -c 512 /dev/sda > mbr.bak

    还原分区表
        cat mbr.bak > /dev/sda

    分区操作    fdisk/gdisk(与fdisk用法一样, 区别在于操作GPT分区)
        查看分区表
            fdisk -l

        修改硬盘分区表
            fdisk /dev/sda
                运行会进入分区表操作命令行
                    m       获取帮助
                    p       查看当前分区表
                    q       退出
                    w       保存当前分区表的修改
                    d       删除分区
                    n       新建分区
                        新建分区交互选择分区类型，分区号, 分区大小
                        p   主分区
                        l   逻辑分区
                        e   扩展分区

                        分区大小
                            起始位置(默认单位: 扇区)
                                建议起始位置按回车选择默认值, 默认容易空间浪费
                            结束位置
                                +10G        代表此分区占10G空间
                                +100M       代表此分区占100M空间

                    t       修改分区标识, 建议与格式化文件类型对应关系

        刷新设备文件
            partprobe
                输入以上命令没有刷到新的分区设备文件就必须重启

        格式化(创建文件系统 -> 树型结构)
            格式化只是初始化文件系统树型结构
            mkfs -t ext4 /dev/sda7
            mkfs.ext4 /dev/sda7
            mkfs.vfat /dev/sda7
            mkfs.ntfs /dev/sda7

        挂载
            查看挂载情况
                mount
                df -h

            将第七个分区挂载到/mnt
                mount /dev/sda7 /mnt

    查看块设备信息
        lsblk

    /etc/fstab配置(开机自动挂载配置文件)
        一行为一条挂载条目, 以空格为分隔符分隔六个字段
        UUID=3c6a9871-e028-4eaa-b04d-ad7eebe8e41b / ext4 errors=remount-ro 0 1

            UUID=3c6a9871-e028-4eaa-b04d-ad7eebe8e41b   源设备
            /                                           挂载目标
            ext4                                        源设备文件类型
            errors=remount-ro                           挂载选项 (defaluts代表默认选择)
            0                                           是否支持dump备份
            1                                           是否开机自检

        /dev/sda8 /disk/data ext4 defaults 0 0
        /dev/sda1 /disk/C ntfs defaults 0 0
        /iso/centos.iso /disk/centos iso9660 loop,ro 0 0
        3.3.3.3:/kyo /mnt nfs defaults,noauto 0 0
            noauto 代表开机不自动挂载

    读取/etc/fstab进行全部挂载(已挂载就不会重挂)
        mount -a

    查看分区的UUID(唯一标识符)
        blkid
            通过UUID来指定分区, 会解决多硬盘或分区操作导致设备文件更换的问题
            分区只要不格式化, 分区的UUID是不会变

    交换分区
        查看交换分区的使用
            free -m

        增加交换分区
            方法一:
                通过fdisk增加一个交换分区(文件系统类型指定为82)

                格式化交换分区
                    mkswap /dev/sda9

                开启交换分区
                    swapon /dev/sda9

                关闭交换分区
                    swapoff /dev/sda9
                    关闭所有交换分区
                        swapoff -a

            方法二:
                通过dd生成交换分区文件
                dd if=/dev/zero of=/tmp/swapfile bs=128M count=10

                chmod 0600 /tmp/swapfile

                mkswap /tmp/swapfile

                swapon /tmp/swapfile

    制作文件系统文件(容器)
        dd if=/dev/zero of=/tmp/diskfile bs=1M count=1024

        mkfs.ext4 /tmp/diskfile

        mount /tmp/diskfile /mnt

        解压initrd.img文件:
            mkdir /tmp/test && cd /tmp/test
            cp /boot/initrd.img-4.4.0-101-generic ./
            mv initrd.img-4.4.0.101-generic initrd.img.gz
            gzip -d initrd.img.gz
            cpio -idmv < initrd.img

        mkinitrd制作initrd.img文件:
            cd /lib/modules/$(uname -r)
            mkinitrd /tmp/initrd.$(uname -r).img $(uname -r)
            cd /tmp
            mv initrd.$(uname –r).img initrd.$(uname –r).img.gz
            gunzip initrd.$(uname -r).img.gz

        cpio制作initrd.img文件:
            find . | cpio -c -o > /tmp/initrd.img
            gzip /tmp/initrd.img

    加密分区
        新建加密分区(使用fdisk新建分区: /dev/sda9)
            cryptsetup luksFormat /dev/sda9
                输入YES再输入加密密码

        打开加密分区
            cryptsetup luksOpen /dev/sda9 kyo
                输入加密密码

            打开首次使用需要格式化
                mkfs.ext4 /dev/mapper/kyo

        挂载加密分区使用
            mount /dev/mapper/kyo /mnt

        关闭加密分区
            umount -l /mnt
            cryptsetup luksClose kyo

    GPG文件加密
        非对称式加密(公钥/私钥) RSA算法
        GNUPG开源工具实现非对称式加密
        安装: apt install gunpg

        创建密钥对
            gpg --gen-key
                选择密钥类型 选择RSA
                选择密钥长度 越长越安全
                选择密钥过期时间 默认永不过期
                输入密钥信息(姓名和电子邮箱)
                输入私钥保护密码

        列表密钥对
            gpg --list-keys

        加密
            gpg -r 密钥标识 -o 加密文件输出路径 -e 要加密的文件
                默认生成的加密文件为二进制格式, 可以通过-a选项指定输出文本格式

            例:
                gpg -r iprintf@qq.com -o /tmp/file.en -e /etc/passwd

        解密
            gpg -r 密钥标识 -o 解密生成文件的路径 -d 要解密文件

            例:
                gpg -r iprintf@qq.com -o /tmp/de.txt -d /tmp/file.en
                    输入私钥保护密码才能进行解密

        公钥导出
            gpg -o public.key --export iprintf@qq.com

        公钥导入
            gpg --import public.key

-------------------------------------------------------------------------------
LVM
    LVM是Linux的一种磁盘空间管理方法, 相比基本分区有很多优点: 动态扩展, 跨硬盘..

    物理卷  --> 块设备
    卷组    --> 模拟一块硬盘(空间为动态)
    逻辑卷  --> 分区

    LVM的使用流程:
        创建物理卷
            pvcreate 基本分区或硬盘

            例:
                将实际第九个分区作为物理卷
                    pvcreate /dev/sda9

                将整个硬盘作为物理卷
                    pvcreate /dev/sda

        创建卷组
            vgcreate 卷组名 物理卷设备

            例:
                vgcreate test /dev/sda9

        创建逻辑卷
            lvcreate -L 空间大小 -n 逻辑卷名字　卷组

            例:
                lvcreate -L 1G -n root test

            创建逻辑卷会在/dev/mapper/生成设备文件, 设备文件名称: 卷组名-逻辑卷名

        格式化逻辑卷
            mkfs -t ext4 /dev/mapper/test-root

        挂载逻辑卷
            mount /dev/mapper/test-root /mnt

    查看所有物理卷信息
        pvs

    查看所有卷组信息
        vgs

    查看所有逻辑卷信息
        lvs

    动态扩展卷组
        vgextend 卷组名 新的物理卷

    动态扩展逻辑卷
        lvresize -r -L +1G /dev/mapper/test-root

-------------------------------------------------------------------------------
练习: 重新分区
    分区方案
        第一个分区(sda1)不变, 保证ubuntu系统
        第二个分区(sda2)  30G    FAT32 (windows C)
        第三个分区(sda3)  4G     ext2 所有Linux的boot目录挂载分区
        第四个分区(sda4)为扩展分区使用剩余所有空间
        第五个分区(sda5)  4G    　交换分区
        第六个分区(sda6)  30G     LVM
            创建卷组(py)
            创建逻辑卷
                centos    5G      CentOS根分区
                data      10G
        第七个分区(sda7)  12G     FAT32(window D)

    准备工作
        格式化sda7分区并且挂载
            mkfs.vfat /dev/sda7
            mount /dev/sda7 /mnt

        复制CentOS镜像文件
            cp CentOS.iso /mnt/centos.iso
            mount -o loop /mnt/centos.iso /opt/
            cp /opt/images /mnt/ -r

        下载win7.gho文件
            wget http://3.3.3.1/iso/win7.gho -O /mnt/win7.gho

        下载ghost程序文件
            wget http://3.3.3.1/iso/memdisk -O /mnt/memdisk
            wget http://3.3.3.1/iso/ghost.img -O /mnt/ghost.img

        修改Grub
            /boot/grub/grub.cfg 追加以下内容

            set timeout_style=show
            set timeout=10

            menuentry "CentOS_Install" {
                set root=(hd0,7)
                loopback loop /centos.iso
                set root=(loop)
                linux /isolinux/vmlinuz
                initrd /isolinux/initrd.img
            }

            menuentry "Win7_Install" {
                set root=(hd0,7)
                linux16 /memdisk c=2000 h=4 s=36 floppy
                initrd16 /ghost.img
            }

    分区方案
        第一个分区(sda1)不变, 保证ubuntu系统
        第二个分区(sda2)  30G    FAT32 (windows C)
        第三个分区(sda3)为扩展分区使用剩余所有空间
        第四个分区(sda5)  4G    　交换分区
        第五个分区(sda6)  30G     LVM
            创建卷组(py)
            创建逻辑卷
                centos    5G      CentOS根分区
                data      10G
        第六个分区(sda7)  12G     FAT32(window D)
        第七个分区(sda8)  4G      ext2 (Linux boot分区)

