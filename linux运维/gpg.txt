GnuPG

简介及安装 {
    GnuPG, 简称GPG, 是目前最流行、最好用的加密工具之一
    GnuPG是商业软件PGP加密工具的替代品
    官网: https://www.gnupg.org
    安装:
        ubuntu: sudo apt install gnupg
        centos: sudo yum install gnupg
        也可到官网下载源码包编译安装(./configure && make && make install)
}

RSA算法历史 {
    1976年以前，所有加密方法都是同一种模式(对称加密)
        对称加密: 使用同种规则进行加密与解密
            流程:
                甲方使用某种规则对信息进行加密
                乙方使用同种规则对信息进行解密
            弱点:
                必须得告诉乙方加密规则才能解密

    1976年，美国两位计算机学家提出了非对称加密算法
        非对称加密: 加密和解密使用的规则不同，但两个规则之间存在某种关系
            流程:
                乙方生成两把密钥(公钥和私钥), 公钥与私钥有一点的关系
                    公钥: 公开的, 任何人都可以获得
                    私钥: 保密的
                甲方使用乙方的公钥对信息进行加密
                乙方得到加密信息后使用私钥解密

    1977年，三位数学家设计了一种算法，可以实现非对称加密, 名为RSA算法
}

gpg命令通用参数 {
    --list-keys, -k
        列出密钥

    --armor, -a
        密钥以二进制存储, --armor参数可以将其转换为ASCII码显示

    --output file, -o file
        指定输出文件

    --keyserver hkp://...
        指定公钥服务器

    --search-keys names
        搜索指定服务器的公钥

    --encrypt, -e
        加密

    --decrypt, -d
        解密

    --recipient name, -r name
        指定哪个公钥

    --batch
        无提示

    --quiet, -q
        安静模式，无错误输出
}

生成密钥 {
    gpg --gen-key
        选择加密算法，默认加密与签名为RSA算法(直接回车)
        输入密钥长度，范围为1024 ~ 4096, 默认为2048, 最长最安全(输入4096, 回车)
        密钥有效期， 默认为0, 代表永不过期(直接回车)
        确认以上选择是否确定(y/n)  (输入y回车)
        输入个人信息:
            真实姓名: 姓名必须以英文的写法
            电子邮箱: 一般会以邮箱为密钥标识, 必须写
            注释: 注释说明此密钥做什么，可以为空
            确定个人信息的正确性?(输入O，代表确定正确)
        输入密码保护密钥
        生成密钥需要随机数，需要你做一些琐事产生随机数(键盘、鼠标、读写磁盘等)
        一定要做一些操作，与密钥长度有关，长度越长这里做的操作就要多久

        最终会生成一对密钥，公钥用于加密签名，私钥用于解密

        密钥ID一般指公钥对应的hash字符串
        用户ID一般指电子邮箱, 可以省略@及后面内容
}

密钥管理 {
    列出密钥:
        gpg --list-key [name|ID]
            第一行显示公钥文件名
            第二行显示公钥特征(公钥位数、Hash字符串、生成时间)
            第三行显示用户信息
            第四行显示私钥特征

    删除密钥:
        gpg --delete-key name
            删除公钥
        gpg --delete-secret-key name
            删除私钥
        gpg --delete-secret-and-public-key name
            删除公钥与私钥

    密钥导出:
        公钥:
            gpg --armor --output public-key.txt --export [ID]
        私钥:
            gpg --armor --output private-key.txt --export-secret-keys [ID]

        导出密钥信任信息(trustdb):
            gpg --export-ownertrust > otrust.txt

        导入密钥信任信息:
            gpg --import-ownertrust < otrust.txt

    密钥导入:
        从文件导入公钥:
            gpg --import 密钥文件

        从gpg服务器上下载公钥导入:
            gpg --keyserver hkp://subkeys.pgp.net --search-keys names

    密钥备份:
        gpg --armor --output private-key.txt --export-secret-keys [ID]
        只要导出备份私钥即可，私钥可以生成公钥, 在导入私钥时会自动生成公钥

        gpg --export-ownertrust > gpgkey.otrust
        导出信任信息数据库，还原会覆盖本地信任关系，不建议使用

        方法二:不通用,平台、版本会影响, 不建议使用
            tar -czf gnupg.tar.gz ~/.gnupg
            直接备份~/.gnupg目录也行

    密钥还原:
        导入私钥
            gpg --import private-key.txt
        设置密钥信任:
            如果备份时导出信任信息数据库，则导入即可，但会覆盖本地信任关系
                gpg --import-ownertrust < gpgkey.otrust

            通过--edit-key设置密钥信任:
                gpg --edit-key ID trust quit
                    选择5最高级别的信任，再选择Y确认即可

        方法二:
            tar -xf gnupg.tar.gz -C  ~
            删除或覆盖原有~/.gnupg目录即可

    上传公钥:
        将公钥上传到公钥服务器上， 这样任何人都可以用你的名义加密或签名
        gpg --send-keys name --keyserver hkp://subkeys.pgp.net

        查看密钥指纹: gpg --fingerprint [name|ID]
}

加密解密 {
    加密:
        gpg --recipient name --output file.en --encrypt file
        gpg -r name -o file.en --e file
            加密file文件输出到file.en文件中

    解密:
        gpg --output file.de --decrypt file.en
            需要输入对应私钥密码才能解密
            解密file.en将结果输出到file.de文件中

        gpg file.en
            可以省略参数，默认为解密，将结果输出到标准输出

    签名:
        不需要加密文件，只需要证明文件是本人发出的，那只需要签名
        生成二进制签名文件:
            gpg --sign file
                会自动生成file.gpg文件，此文件为签名文件

        生成ASCII码签名文件：
            gpg --clearsign file

        生成与文件内容分开的签名二进制文件:
            gpg --detach-sign file

        生成与文件内容分开的签名ASCII码文件:
            gpg --detach-sign file

    验证签名:
        gpg --verify file.gpg
            显示Good signature from ID则代表验证成功
}
